#include "cnorm.inc.cws"
#include "rtxNode/rtxNode.inc.cws"
#include "rtxLink/rtxLink_ConfigMatcher.inc.cws"

// Used to build things bit by bit
local tmp;
local config;
local with;

function build_version(local_node : node, v1 : value, v2 : value, v3 : value)
{
    local unit;
    rtxNodeSerial(local_node);
    rtxNodeSerialUnit(unit, v1);
    rtxNodeSerial_AddUnit(local_node, unit);
    unit = "";
    rtxNodeSerialSep(unit, ".");
    rtxNodeSerial_AddUnit(local_node, unit);
    unit = "";
    rtxNodeSerialUnit(unit, v2);
    rtxNodeSerial_AddUnit(local_node, unit);
    unit = "";
    rtxNodeSerialSep(unit, ".");
    rtxNodeSerial_AddUnit(local_node, unit);
    unit = "";
    rtxNodeSerialUnit(unit, v3);
    rtxNodeSerial_AddUnit(local_node, unit);
    unit = "";
}

config = "";
with = "";
build_version(config, "2", "6", "34");
build_version(with, "2", "6", "35");
// Is config < with ? Should be.
if (rtxLink_CompareValues<"<=">(with, config) == false)
{
    traceLine("Type " + config.type
              + ": With and config should match : config < with");
    exit 1;
}


config = "";
with = "";
build_version(config, "2", "6", "35");
build_version(with, "2", "6", "35");
// Is config < with ? Should not be, ==
if (rtxLink_CompareValues<"<=">(with, config) == false)
{
    traceLine("Type " + config.type
              + ": With and config should match : config == with");
    exit 1;
}

// Now make config a bit longer... (config > with)
rtxNodeSerialSep(tmp, ".");
rtxNodeSerial_AddUnit(config, tmp);
tmp = "";
rtxNodeSerialUnit(tmp, "1");
rtxNodeSerial_AddUnit(config, tmp);
if (rtxLink_CompareValues<"<=">(with, config) == true)
{
    traceLine("Type " + config.type
              + ": With and config should not match : config(=,longer) > with");
    exit 1;
}


config = "";
with = "";
build_version(config, "2", "6", "35");
build_version(with, "2", "6", "34");
// Is config < with ? Should not be, >
if (rtxLink_CompareValues<"<=">(with, config) == true)
{
    traceLine("Type " + config.type
              + ": With and config should not match : config > with");
    exit 1;
}

config = "";
with = "";
rtxNodeNumber(config, "1");
rtxNodeNumber(with, "2");
if (rtxLink_CompareValues<"<=">(with, config) == false)
{
    traceLine("Type " + config.type
              + ": With and config should match : config < with");
    exit 1;
}

config = "";
with = "";
rtxNodeNumber(config, "1");
rtxNodeNumber(with, "1");
if (rtxLink_CompareValues<"<=">(with, config) == false)
{
    traceLine("Type " + config.type
              + ": With and config should match : config == with");
    exit 1;
}

config = "";
with = "";
rtxNodeNumber(config, "2");
rtxNodeNumber(with, "1");
if (rtxLink_CompareValues<"<=">(with, config) == true)
{
    traceLine("Type " + config.type
              + ": With and config should not match : config > with");
    exit 1;
}


config = "";
with = "";
rtxNodeIdentifier(config, "Windows7");
rtxNodeIdentifier(with, "WindowsXP");
try
{
    traceLine("rtxLink_CompareValues<\"<=\">(with, config) = "
              + rtxLink_CompareValues<"<=">(with, config));
    traceLine("Type " + config.type
              + ": With and config should have thrown an error: type = "+with.type);
}
catch (sError)
{
    exit 0;
}
exit 1;
