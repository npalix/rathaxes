/*
	TEST for template codeworker generation
*/

#include  "01_H_test_back_loadFromCache.cws"


// The previous test's code has already created a directory.
// We need to load files from there, so we wont change it.

//working_directory = "../__01_K_test_back_resolvePointcutDefault";
//if (existDirectory(working_directory))
//{
//    traceLine("Directory " + working_directory + " already exists");
//    traceLine("Removing directory: " + working_directory);
//}
//traceLine("Creating directory: " + working_directory);
//createDirectory(working_directory);
//changeDirectory(working_directory);

// Load the two templates :
// First, hash the prototype, then find every template matching it,
// And finally reduce the selection to only one template before loading.

local theWith;
local theCacheNode;

if (rtxLink_findGlobalCode(theWith, theCacheNode) == false)
    error("01_K_test_back_resolvePointcutDefault.cws:"
          +" The global code could not be found by rtxLink.");

traceLine("Loading global_code... cache_node : "+toString(theCacheNode, true));
local c_tree;
if (rtxLink_LoadScript(theCacheNode, c_tree) == false)
    error("01_K_test_back_resolvePointcutDefault.cws:"
          +" Could not load either script or tree files");

traceLine("====>Codeworker Script and tree Loaded with success.");

// Now, try the C code generation out : simulate an input (the resVal node)
// And start the resolution of the placeHolders.
local resVals;
local curvalue;
rtxNodeResVal(resVals);
insert resVals["Context"];
rtxNodeResVal(resVals["Context"]);
insert resVals["Context"]["name"];
curvalue = "theContextType";
rtxNodeResValLeaf(resVals["Context"]["name"], curvalue);
insert resVals["config"];
rtxNodeResVal(resVals["config"]);
insert resVals["config"]["plop"];
rtxNodeResVal(resVals["config"]["plop"]);
insert resVals["config"]["plop"]["name"];
curvalue = "theConfigName";
rtxNodeResValLeaf(resVals["config"]["plop"]["name"], curvalue);

// We have a pointcut node that should be replaced by its default code
inject<"__rtx_pointcut__">(resVals,
                           c_tree.c_block.compile["_2"].node,
                           c_tree.c_block.compile["_2"].node);

traceLine("Pointcut resolved : The pointcut will be replaced by :"
          + cnorm2c(c_tree.c_block.block["1"]));


