interface LKM
{
    builtin  type               Device_list;//??
    builtin  type		Symbol;

    provided pointcut           INCLUDE_DEPENDENCIES;
    provided pointcut           GLOBAL_DATA_DECLARATION;
    provided pointcut           GLOBAL_CODE_LKM::GLOBAL_CODE_DEFINITION;
    provided pointcut           BASE_LKM_CODE_LKM::GLOBAL_CODE_DEFINITION;

    provided sequence           load()
    {
        provided pointcut       INIT_LKM_FPTRS(Symbol); // Symbol is the type of the joinpoint
        provided chunk            BASE_LKM_CODE_LKM::GLOBAL_CODE_DEFINITION;
    }

    provided sequence           unload()
    {
        provided chunk            BASE_LKM_CODE_LKM::GLOBAL_CODE_DEFINITION;
    }

    required variable Device_list 	Devices;
    required variable string    	OS;
    optional variable numser    	version;
    optional variable numser    	arch;
}

interface Algorithms : LKM
{
    builtin  type       string;
    builtin  type       number;
    builtin  type       numser;
    builtin  type       register[ register_field [ number ] ]; //collection?
    provided type       Buffer;

    provided sequence   log(string)
    {
        provided chunk   LKM::GLOBAL_CODE_LKM::GLOBAL_CODE_DEFINITION;
        provided chunk  ::CALLS; // use current namespace/template from frontend
    }

    provided sequence   set(register, register_field) // should be in subsystem BUS
    {
    	provided chunk LKM::GLOBAL_CODE_LKM::GLOBAL_CODE_DEFINITION;
	provided chunk ::CALLS; // use current namespace/template from frontend
    }
    //...
}

interface User : LKM
{
    provided type               Context;//why not device?


    required sequence           open(Context)
    {
        provided chunk          LKM::GLOBAL_CODE_DEFINITION;
        provided chunk          LKM::INIT_LKM_FPTRS;
        provided pointcut	CALLS;
    }

    required sequence           close(Context)
    {
        provided chunk          LKM::GLOBAL_CODE_DEFINITION;
        provided chunk          LKM::INIT_LKM_FPTRS;
        provided pointcut       CALLS;
    }

    required sequence           read(Context, Buffer)
    {
        provided chunk          LKM::GLOBAL_CODE_DEFINITION;
        provided chunk          LKM::INIT_LKM_FPTRS;
        provided pointcut	CALLS;
    }

    required sequence           write(Context, Buffer)
    {
        provided chunk          LKM::GLOBAL_CODE_DEFINITION;
        provided chunk          INIT_LKM_FPTRS;
        provided pointcut	CALLS;
    }

    required sequence           on_plug(Context)
    {
        provided chunk          LKM::GLOBAL_CODE_DEFINITION;
        provided chunk          INIT_LKM_FPTRS;
        provided pointcut	CALLS;
    }
}

with LKM
values OS=Linux
{
    extend interface
    {
        required variable string    type;
        required variable number    MAJOR;
        optional variable number    minor;
    }
}

with LKM
values OS=OpenBSD
{
    extend interface
    {
        required variable string    type;
        required variable number    MAJOR;
        optional variable number    minor;
    }
}

with LKM
values OS=Windows
{
    extend interface
    {
        required variable numser    UUID;
        required variable string    device_name;
        required variable string    device_guid;
        required variable string    class_name;
        required variable string    class_guid;
        required variable string    dispatch_mode;
    }
}
