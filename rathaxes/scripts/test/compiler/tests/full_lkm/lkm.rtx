

device rs232
use LKM, User, Algorithms
{
// TODO
//  register(r) bit[8] rcv_buff like(........) @(ioport + 0);
//  
//  register(w) bit[8] snd_buff like(........) @(ioport + 0);
//  
//  register(rw) bit[8] ier like(**......) @(resources::ioport + 1)
//  {
//  	[0] AS data_available;
//  	[1] AS transmitter_empty;
//  	[2] AS line_status_change;
//  	[3] AS modem_status_change;
//  	[4] AS sleep_mode;
//  	[5] AS low_power_mode;
//  };
   
   // here we use short name of sequences...
    open(Context ctx)
    {
        log("open called on device rs232");
    }

    // here we use long name of sequences....
    User::close(Context ctx)
    {
        Algorithms::log("close called on device rs232");
    }

    User::write(Context ctx, Buffer buf)
    {
        log("write called on device rs232 with buf");
    }

    User::read(Context ctx, Buffer buf)
    {
        log("read called on device rs232");
    }
}

configuration
{
	arch = x86;//???

	// link between LKM and devices...
	LKM::Devices = {rs232};

    LKM::OS = Linux
    {
        LKM::version = 2.6.24;
        LKM::MAJOR = 1;
        LKM::minor = 03;
        LKM::type = char;
    }

    LKM::OS = OpenBSD
    {
        LKM::version = 4.8;
        LKM::MAJOR = -1;
        LKM::minor = 03;
        LKM::type = char;
    }

    LKM::OS = Windows
    {
        LKM::version = XP;
        LKM::UUID = "1ADB9D41-6FE5-432e-A5FF-9B6911A150A4";
        LKM::device_name = GUID_DEVINTERFACE_RATHAXES_SERIAL;
        LKM::device_guid = "1ADB9D41-6FE5-432e-A5FF-9B6911A150A4";
        LKM::class_name = GUID_DEVCLASS_RATHAXES;
        LKM::class_guid = "E20808D9-5E08-4a2a-80A1-84DA0B2180AB";
        LKM::dispatch_mode = WdfIoQueueDispatchParallel;
    }
}
