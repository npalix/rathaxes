#if !existFunction(rtxNodeMiddle_version)

function rtxNodeMiddle_version()
{return "1.0";}

function        rtxNodeItf(local_node      : node,
                           itf_name        : value,
                           out_ref_inherit : reference,
                           out_ref_body    : reference)
{
    rtxNode(local_node);
    local_node.type = "__rtx_itf__";
    insert local_node.body;
    insert local_node.name = itf_name;
    insert local_node.inheritance;

    /* XXX: Do we need the boolean argument ? */
    cnormNodeBlock(local_node.body);
    ref out_ref_body = local_node.body;
    ref out_ref_inherit = local_node.inheritance;
    return true;
}

function        rtxNodeItfDeclaration(local_node        : node,
                                      qualifier         : value,
                                      dtype             : value,
                                      out_ref_body      : reference)
{
    rtxNode(local_node);
    local_node.type = "__rtx_itf_decl__";

    insert local_node.qualifier = qualifier;
    insert local_node.body;
    insert local_node.body.type = dtype;
    insert local_node.body.rtype;
    insert local_node.body.identifiers;

    ref out_ref_body = local_node.body;
    return true;
}

function rtxNodePlaceHolder(local_node   : node)
{
    insert local_node.type = "__rtx_tpl_placeHolder__";

    // The potential concatenation prefix
    insert local_node.prefix;

    // The content of the placeHolder (between "${" and '}')
    insert local_node.body;

    // The potential concatenation sufix
    insert local_node.sufix;

    return true;
}

function rtxNodeVar_AddIdentifier(local_node : node, theField : value)
{
    pushItem local_node.identifiers;

    local theIdentifier;
    ref theIdentifier = local_node.identifiers#back;
    rtxNodeIdentifier(theIdentifier, theField);

    return true;
}

#end
