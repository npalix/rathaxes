#if !existFunction(rtxNode_version)

function rtxNode_version()
{return "1.0";}


function	rtxNode(local_node : node)
{
    cnormNode(local_node);
    local_node.type = "__rtx_node__";

    return true;
}

function        rtxNodeRType(local_node : node,
                             name       : value)
{
    rtxNode(local_node);
    local_node.type = "__rtx_rtype__";
    insert local_node.name = name;
    insert local_node.params;
    return true;
}

function rtxNodeNumber(local_node : node, nb : value)
{
    rtxNode(local_node);
    insert local_node.type = "__rtx_nb__";

    insert local_node.val = nb;

    return true;
}

function rtxNodeSerialUnit(local_node : node, theUnit : value)
{
    rtxNode(local_node);
    insert local_node.type = "__rtx_serial_unit__";

    insert local_node.val = theUnit;

    return true;
}

function rtxNodeSerialSep(local_node : node, theSeparator : value)
{
    rtxNode(local_node);
    insert local_node.type = "__rtx_serial_sep__";

    insert local_node.val = theSeparator;

    return true;
}

function rtxNodeSerial_AddUnit(theSerial : node, theSerialUnit : node)
{
    if (theSerial.type != "__rtx_serial__")
        return false;

    pushItem theSerial.list;
    setall theSerial.list#back = theSerialUnit;

    return true;
}

function rtxNodeSerial(local_node : node)
{
    rtxNode(local_node);
    insert local_node.type = "__rtx_serial__";

    insert local_node.list;

    return true;
}

function rtxNodeIdentifier(local_node : node, id : value, scope : value = "")
{
    rtxNode(local_node);
    insert local_node.type = "__rtx_id__";

    insert local_node.scope = scope;
    insert local_node.name = id;

    return true;
}

function rtxNodeVar_AddIdentifier(local_node : node, theField : value)
{
    pushItem local_node.identifiers;

    local theIdentifier;
    ref theIdentifier = local_node.identifiers#back;
    rtxNodeIdentifier(theIdentifier, theField);

    return true;
}

function rtxNodeVar(local_node   : node,
                    theVar       : value)
{
    rtxNode(local_node);
    insert local_node.type = "__rtx_var__";

    // A list of chained identifiers constituting the real field identifier
    insert local_node.identifiers;
    // Add the var as the first identifier
    rtxNodeVar_AddIdentifier(local_node, theVar);

    return true;
}

function rtxNodeVarList_AddNode(local_node : node,
                                theVar     : node)
{
    pushItem local_node.list;
    setall local_node.list#back = theVar;

    return true;
}

function rtxNodeVarList(local_node : node)
{
    rtxNode(local_node);
    insert local_node.type = "__rtx_varlist__";

    insert local_node.list;

    return true;
}

function rtxNodeWithConstraint(local_node   : node,
                               theId        : node,
                               theOperator  : value,
                               out_ref_val  : reference)
{
    rtxNode(local_node);
    local_node.type = "__rtx_with_constraint__";

    insert local_node.var;
    setall local_node.var = theId;
    insert local_node.op = theOperator;
    insert local_node.val;
    ref out_ref_val = local_node.val;

    return true;
}

function rtxNodeWith(local_node             : node,
                     out_ref_interfaces     : reference,
                     out_ref_constraints    : reference,
                     out_ref_body           : reference,
                     out_ref_c_block        : reference)
{
    rtxNode(local_node);
    local_node.type = "__rtx_with__";

    insert local_node.interfaces;
    ref out_ref_interfaces = local_node.interfaces;

    insert local_node.constraints;
    ref out_ref_constraints = local_node.constraints;

    insert local_node.body;
    cnormNodeBlock(local_node.body);
    ref out_ref_body = local_node.body;

    insert local_node.c_block;
    cnormNodeBlock(local_node.c_block);
    insert local_node.c_block.compile;
    insert local_node.c_block.compile.nbplaceholder = 0;
    ref out_ref_c_block = local_node.c_block;

    return true;
}

#include "rtxNodeFront.inc.cws"
#include "rtxNodeMiddle.inc.cws"
#include "rtxNodeBack.inc.cws"

#end
