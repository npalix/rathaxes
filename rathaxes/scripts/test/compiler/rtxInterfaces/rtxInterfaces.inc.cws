#if !existFunction(rtxInterfaces_version)

#include "misc/colors.cws"
#include "rtxLink/rtxLink.inc.cws"

function        rtxInterfaces_version()
{ return "1.0"; }


/*
 * This function checks whether the interfaces inherited/depended on
 * by the current interface exist. This is the firs step of the interface
 * auto-validation mecanism.
 *
 * This is a templated walking function which aim is only to reach every
 * interface or extension and to tell if it is dependency-valid.
 *
 * This default implementation returns true to avoid failing a test only
 * because an unmanaged node was encountered.
 */
function        rtxItfCheckInheritance_walk<T>(local_node : node,
                                       interfaces_list : node)
{
    traceLine("Unknown rtx_node :" + T);
    return true;
}

function        rtxItfCheckInheritance_walk<"__rtx_itf__">(local_node : node,
                                                           interfaces_list : node)
{
    foreach inherited_interface in local_node.inheritance
    {
        local parentRef = false;
        local parentName = key(inherited_interface);

        // First, check if the interface was in the current file
        // If not, check within the cache.
        if (interfaces_list.findElement(parentName) == false
            && rtxLink_findInterface(parentName, parentRef) == false)
        {
            traceLine(RED + "[Error] Unable to find interface ``" + parentName
                      + "'' required by ``" + local_node.name + "''" + DEFAULT_COLOR);
            return false;
        }
        // If any of the two attemps succeededm then retrieve the node.
        // (either by the cache if parentRef is not false, or in the tree)
        else
        {
            if (parentRef == false)
                ref local_node.inheritance[parentName] = interfaces_list[parentName];
            else
                rtxLink_LoadItem(parentRef, local_node.inheritance[parentName]);
        }
    }

    return true;
}

function        rtxItfCheckInheritance_walk<"__block__">(local_node : node,
                                                         interfaces_list : node)
{
    local err_count = 0;
    // Walk through a block.
    foreach item in local_node.block
    {
        if (rtxItfCheckInheritance_walk<item.type>(item, interfaces_list) == false)
            increment(err_count);
    }
    if (err_count != 0)
        return false;
    return true;
}
function rtxItfCheckInheritance_walk<"__rtx_with__">(local_node : node,
                                                     interfaces_list : node)
{
    return rtxItfCheckInheritance_walk<"__block__">(local_node.body, interfaces_list);
}

function        rtxItfCheckInheritance_walk<"__root_block__">(local_node : node,
                                                              interfaces_list : node)
{
    return rtxItfCheckInheritance_walk<"__block__">(local_node, interfaces_list);
}



function        rtxItfIdNodeToRType(idNode: node, rtypeNode : node)
{
    local dummy_out_ref;

    rtxNodeRType(rtypeNode, idNode, dummy_out_ref);
}

/*
 * This function checks whether an interface contains a type described
 * by a RType node, by checking inside its tree.
 */
function        rtxInterfaceHasType(rtypeNode : node, interfaceNode : node)
{
    if (rtypeNode.type != "__rtx_rtype__")
        error("Bad node type. Received: " + rtypeNode.type);

    local name = rtxRTypeName<rtypeNode.type>(rtypeNode);
    // Unkown scope and not explicit global ?
    if (rtypeNode.name.scope == "" && rtypeNode.name.global == false)
    {
        // Check current interface.
        if (findElement(name + "{}", interfaceNode.types) == true)
        {
            rtypeNode.name.scope = interfaceNode.name;
            return true;
        }

        // Recursive check in parents interfaces.
        foreach parentInterface in interfaceNode.inheritance
        {
            if (rtxInterfaceHasType(rtypeNode, parentInterface) == true)
            {
                // then set the interface's name
                rtypeNode.name.scope = parentInterface.name;
                return true;
            }
        }
    }
    else if (rtypeNode.global == false) // known scope
    {
        if (rtypeNode.name.scope != interfaceNode.name)
        {
            // If it's not a direct inheritance, try out by going through the parent first to find the itf...
            if (!findElement(rtypeNode.name.scope, interfaceNode.inheritance))
            {
                foreach parentInterface in interfaceNode.inheritance
                {
                    if (rtxInterfaceHasType(rtypeNode, parentInterface) == true)
                        return true;
                }
                traceLine(RED + "[Error] Could not find interface '"+rtypeNode.name.scope+"' in inheritance tree." + DEFAULT_COLOR);
                return false;
            }

            if (findElement(name + "{}", interfaceNode.inheritance[rtypeNode.name.scope].types) != false)
                return true;
        }
        else if (findElement(name + "{}", interfaceNode.types) == true)
            return true;
    }
    else // explicit global
    {
        // Manage globally defined items.
    }

    return false;
}


/*
 * This function checks whether the pointcut is declared by the itfTree.
 */
function        rtxTypeCheck_ItfDefinesPointcut(pointcutId : node, itfTree : node)
{
    // Then check if the pointcut is defined within the interface
    // (global or inside a sequence)
    foreach def in itfTree.body.block
    {
        // Check global pointcuts...
        if (def.type == "__rtx_itf_decl__" && def.specifier == "pointcut")
        {
            if (def.body.name.name == pointcutId.name)
                return true;
        }
        // type templates dont matter here, they should not define pointcuts.
        // So, check only sequence templates...
        else if (def.type == "__rtx_itf_decl__" && def.specifier == "sequence")
        {
            // In which, check every poincut...
            foreach item in def.body.block
            {
                if (item.type == "__rtx_itf_decl__" && item.specifier == "pointcut"
                    && item.body.name.name == pointcutId.name)
                    return true;
            }
        }
    }
}


/*
 * This function checks whether an interface declares a pointcut described
 * by a RType node, by checking inside its tree.
 */
function        rtxTypeCheck_ItfCheckPointcut(pointcutId : node, interfaceNode : node)
{
    if (pointcutId.type != "__rtx_id__")
        error("Bad node type. Received: " + pointcutId.type);

    // Unkown scope and not explicit global ?
    if (pointcutId.scope == "" && pointcutId.global == false)
    {
        if (rtxTypeCheck_ItfDefinesPointcut(pointcutId, interfaceNode) == true)
        {
            // then set the interface's name
            pointcutId.scope = interfaceNode.name;
            return true;
        }

        // Recursive check in parents interfaces.
        foreach parentInterface in interfaceNode.inheritance
        {
            if (rtxTypeCheck_ItfCheckPointcut(pointcutId, parentInterface) == true)
            {
                // then set the interface's name
                pointcutId.scope = parentInterface.name;
                return true;
            }
        }
    }
    else if (pointcutId.global == false) // known scope
    {
        if (pointcutId.scope != interfaceNode.name && !isEmpty(interfaceNode.inheritance))
        {
            if (!findElement(pointcutId.scope, interfaceNode.inheritance))
            {  
                foreach parentInterface in interfaceNode.inheritance
                {
                    if (rtxTypeCheck_ItfCheckPointcut(pointcutId, parentInterface) == true)
                        return true;
                }
                traceLine(RED + "[Error] The interface "+interfaceNode.name
                          +" does not depend on interface '"+pointcutId.scope
                          +"': The pointcut cannot be declared." + DEFAULT_COLOR);
                return false;
            }

            if (rtxTypeCheck_ItfDefinesPointcut(pointcutId, interfaceNode.inheritance[pointcutId.scope]) == true)
                return true;
        }
        else if (rtxTypeCheck_ItfDefinesPointcut(pointcutId, interfaceNode) == true)
            return true;
    
    }
    else // explicit global
    {
        // Manage globally defined items in hard-code (those are builtins, afterall.
        if (pointcutId.name == "CALLS")
            return true;
    }
    return false;
}


/*
 *
 * The set of functions rtxItfCheckTypesDeclarations<T> walk through a tree
 * and help check whether a type used for a parameter of a template is defined
 * in the associated interface. They also allow to check whether an interface
 * provides a pointcut to be used by the checked one.
 *
 */
function        rtxItfCheckTypesDeclarations<T>(currentDeclaration : node,
                                                currentInterface : node,
                                                interfacesList : node)
{
    return true;
}


function        rtxItfCheckTypesDeclarations<"variable">(currentDeclaration : node,
                                                         currentInterface : node,
                                                         interfacesList : node)
{
    local scope = currentDeclaration.rtype.name.scope;
    local name = currentDeclaration.rtype.name.name;
    local typeName = rtxRTypeName<currentDeclaration.rtype.type>(currentDeclaration.rtype);
    local varname = currentDeclaration.identifiers.scope + "::" + currentDeclaration.identifiers.name;
    local ret = false;

    if (scope == "")
    {
        traceLine(RED + "[Error] Type '"+name+"' should be defined in the global namespace." + DEFAULT_COLOR);
        ret = true;
    }
    else
    {
        ret = rtxInterfaceHasType(currentDeclaration.rtype, currentInterface);
        if (ret == false)
            traceLine(RED + "[Error] Type ``" + typeName + "''"
                      + " could not be found for variable ``" + varname + "''." + DEFAULT_COLOR);
    }

    return ret;
}

function        rtxItfCheckTypesDeclarations<"sequence">(currentDeclaration : node,
                                                         currentInterface : node,
                                                         interfacesList : node)
{
    local scope = currentDeclaration.rtype.name.scope;
    local name = currentDeclaration.rtype.name.name;
    local typeName = rtxRTypeName<currentDeclaration.rtype.type>(currentDeclaration.rtype);
    local errcount = 0;

    // First, check the types of the parameters.
    foreach entry in currentDeclaration.rtype.params
    {
        local rtypeNode;
        rtxItfIdNodeToRType(entry, rtypeNode);
        if (rtxInterfaceHasType(rtypeNode, currentInterface) == false)
        {
            traceLine(RED + "[Error] Parameter type ``"
                      + rtypeNode.name.scope + "::" + rtypeNode.name.name + "''"
                      + " could not be found for sequence ``"
                      + typeName + "''." + DEFAULT_COLOR);
            increment(errcount);
        }
        else // Success -> update the rtypeNode
        {
            entry.scope = rtypeNode.name.scope;
            entry.global = false;
        }
    }

    // Second, check that the pointcuts to be implemented exist.
    foreach decl in currentDeclaration.body.block
    {
        if (decl.type == "__rtx_itf_decl__" && decl.specifier == "chunk")
        {
            if (rtxTypeCheck_ItfCheckPointcut(decl.body.pointcut, currentInterface) == false)
            {
                traceLine(RED + "[Error] Pointcut '"
                          + rtxRTypeName<decl.body.pointcut.type>(decl.body.pointcut)
                          +"' is not declared." + DEFAULT_COLOR);
                increment(errcount);
            }
            // In the case of success, the scoped identifier is already updated.
        }
    }
    if (errcount != 0)
        return false;
    return true;
}

function        rtxItfCheckTypesDeclarations<"__rtx_itf__">(currentDeclaration : node,
                                                            currentInterface : node,
                                                            interfacesList : node)
{
    local errcount = 0;
    foreach decl in currentDeclaration.body.block
    {
        if (rtxItfCheckTypesDeclarations<decl.specifier>(decl, currentDeclaration, interfacesList) == false)
            increment(errcount);
    }
    if (errcount != 0)
        return false;
    return true;
}

function        rtxItfCheckTypesDeclarations<"__block__">(currentDeclaration : node,
                                                          currentInterface : node,
                                                          interfacesList : node)
{
    local errcount = 0;
    foreach item in currentDeclaration.block
    {
        if (rtxItfCheckTypesDeclarations<item.type>(item,
                                                    currentInterface,
                                                    interfacesList) == false)
            increment(errcount);
    }
    if(errcount != 0)
        return false;
    return true;
}
function        rtxItfCheckTypesDeclarations<"__rtx_with__">(currentDeclaration : node,
                                                             currentInterface : node,
                                                             interfacesList : node)
{
    return rtxItfCheckTypesDeclarations<"__block__">(currentDeclaration, currentInterface, interfacesList);
}
function        rtxItfCheckTypesDeclarations<"__root_block__">(currentDeclaration : node,
                                                               currentInterface : node,
                                                               interfacesList : node)
{
    return rtxItfCheckTypesDeclarations<"__block__">(currentDeclaration, currentInterface, interfacesList);
}

function        rtxItfCheckTypesDeclarations_walk(local_node : node,
                                                  interfacesList : node)
{
    return rtxItfCheckTypesDeclarations<local_node.type>(local_node, local_node, interfacesList);
}



/******************************************************************************
 *
 * The functions that helps checking a tpl's coherence against an itf and rev.
 *
 *****************************************************************************/

/**
 *
 * This function takes a RType node for a pointcut and the name of the itf to
 * search into.
 *
 * It then checks whether the pointcut was defined within the interface or not.
 *
 */
function rtxTypeCheck_ItfNameDefinesPointcut(pointcutId : node, itfName : node)
{
    local pointcutName = rtxRTypeName<pointcutId.type>(pointcutId);
    local itfNode;
    local itfTree;

    // If there is no explicit interface, we must check each interface in the dependencies.
    // First, load the interface's tree...
    if (rtxLink_findInterface(itfName, itfNode) == false)
    {
        traceLine(RED + "[Error] Interface '" + itfName + "' containing the pointcut"
                  + " could not be found within the cache." + DEFAULT_COLOR);
        return false;
    }
    if (rtxLink_LoadItem(itfNode, itfTree, false) == false)
    {
        traceLine(RED + "[Error] Could not load interface's '" + itfName
                  + "' tree." + DEFAULT_COLOR);
        return false;
    }
    if (rtxTypeCheck_ItfDefinesPointcut(pointcutId, itfTree) != false)
    {
        pointcutId.scope = itfName;
        return true;
    }

    // If test did not succeed  AND the interface is not explicitly given:
    if (pointcutId.scope == "")
    {
        // Then, check for the parent interfaces.
        foreach parent in itfTree.inheritance
        {
            local name = key(parent);
            if (rtxTypeCheck_ItfNameDefinesPointcut(pointcutId, name) != false)
            {
                pointcutId.scope = name;
                return true;
            }
        }
    }

    return false;
}


/*
 * This function takes a Rtype node for a chunk and a template tree,
 * and checks whether the chunk was implemented within the template.
 *
 * XXX TODO FIXME
 * The function does not check if the statement is ambiguous:
 * if two interfaces define "PLOP", then defining the chunk "PLOP" will
 * not result in an ambiguous statement, but resolve as the first pointcut
 * encountered.
 */
function rtxTypeCheck_TemplateHasChunk(chunkId : node, tpl : node)
{
    local fullPointcut = rtxRTypeName<chunkId.type>(chunkId);
    foreach item in tpl.body.block
    {
        // If Fully-qulified equals, or if only name matches and not fully qualified
        if (fullPointcut == rtxRTypeName<item.pointcut.type>(item.pointcut)
            || (chunkId.name == item.pointcut.name && item.pointcut.scope == ""))
        {
            // Then qualify it.
            item.pointcut.scope = chunkId.scope;
            return true;
        }
    }
    return false;
}

/*
 * This function takes a Rtype node for a pointcut and a template tree,
 * and checks whether the pointcut was defined within the template.
 *
 * XXX TODO FIXME
 * The function does not check if the statement is ambiguous:
 * if the interface declare two "PLOP" for a same template but different scopes,
 * then defining the pointcut "PLOP" will not result in an ambiguous statement,
 * but resolve as the first pointcut encountered.
 */
function rtxTypeCheck_TemplateHasPointcut(pointcutId : node, tpl : node)
{
    local fullPointcut = rtxRTypeName<pointcutId.type>(pointcutId);
    foreach chunk in tpl.body.block
    {
        foreach placeHolder in chunk.body.compile
        {
            localref body = placeHolder.node.body;
            if (body.type == "__rtx_pointcut__")
            {
                local fullTplPointcut = rtxRTypeName<body.name.type>(body.name);
                if (fullTplPointcut == fullPointcut
                    || (body.name.name == pointcutId.name && body.name.scope == ""))
                {
                    // Then qualify it
                    body.name.scope = pointcutId.scope;
                    return true;
                }
            }
        }
    }
    return false;
}




declare function rtxTypeCheck_TemplateSpec<T>(tplRtype : node, tplTree : node,
                                              itfTplNode : node);
function rtxTypeCheck_TemplateSpec<T>(tplRtype : node, tplTree : node,
                                      itfTplNode : node)
{
    error("Function rtxTypeCheck_TemplateSpec<'"+T+"'> is not implemented.");
}

/**
 *
 * This function takes a template rtype, a template tree, and the associated
 * node within the interface.
 * 
 * Its role is to check that the mapping indicated in the interface is properly
 * respected in the type template's implementation. This also checks that every
 * mapping implemented inside the template is required by the interface.
 *
 * XXX FIXME TODO
 * Currently, we do not manage the chunks in a type template, we'll hade to
 * Think and design this properly.
 *
 */
function rtxTypeCheck_TemplateSpec<"type">(tplRtype : node, tplTree : node,
                                           itfTplNode : node)
{
    local errcount = $0$;
    localref tpl_mapping = tplTree.mapping.body.block;
    local tplName = rtxRTypeName<tplRtype.type>(tplRtype);

    // If there are builtin chunks mandatory, check them here.
    // Now, check that every mapping is provided by the template,
    foreach mapId in itfTplNode
    {
        // The mapping ids are the keys in tpl.mapping.body.block
        if (!findElement(mapId, tpl_mapping))
        {
            traceLine(RED + "[Error] Type template " + tplName
                      +" does not implement the required mapping: '"
                      + mapId + "'." + DEFAULT_COLOR);
            increment(errcount);
        }
    }
    // and finally check that no mapping provided is unknown to the interface.
    foreach mapping in tpl_mapping
    {
        local check = false;
        foreach mapId in itfTplNode
        {
            if (mapId == key(mapping))
            {
                check = true;
                break ;
            }
        }
        if (check != true)
        {
            traceLine(RED + "[Error] Type template " + tplName
                      + " implements an unknown mapping: '"
                      + key(mapping) + "'." + DEFAULT_COLOR);
            increment(errcount);
        }
    }

    if (errcount != "0")
        return false;
    return true;
}


/**
 *
 * This function takes a template rtype, a template tree, and the associated
 * node within the interface.
 *
 * This function checks that a sequence template implements all the required
 * pointcuts and chunks.
 * It also checks that the chunks implemented are linked to valid pointcuts
 * (Meaning that the pointcuts must be defined in the current interface, or
 * in a parent interface. This must not be defined in a child interface).
 *
 * XXX TODO FIXME
 * We still do not know how to manage not-required pointcuts...
 *
 */
function rtxTypeCheck_TemplateSpec<"sequence">(tplRtype : node, tplTree : node,
                                               itfTplNode : node)
{
    local errcount = $0$;
    local tplName = rtxRTypeName<tplRtype.type>(tplRtype);

    // First, check that the template respects what's imposed by the interface
    foreach item in itfTplNode.body.block
    {
        if (item.type == "__rtx_itf_decl__")
        {
            if (item.specifier == "chunk"
                && rtxTypeCheck_TemplateHasChunk(item.body.pointcut, tplTree) == false
                && item.qualifier == "provided")
            {
                traceLine(RED + "[Error] Sequence template '" + tplName
                          + "' does not provide the chunk '"
                          + rtxRTypeName<item.body.pointcut.type>(item.body.pointcut) + "'" + DEFAULT_COLOR);
                increment(errcount);
            }
            if (item.specifier == "pointcut"
                && rtxTypeCheck_TemplateHasPointcut(item.body.name, tplTree) == false
                && item.qualifier == "provided")
            {
                traceLine(RED + "[Error] Sequence template '" + tplName
                          + "' does not provide the pointcut '"
                          + rtxRTypeName<item.body.name.type>(item.body.name) + "'" + DEFAULT_COLOR);
                    increment(errcount);
            }
        }
    }

    // Next, we need to check that every non-mandatory chunk actually exists.
    // But... What about non-mandatory pointcuts ?
    foreach chunk in tplTree.body.block
    {
        local name = chunk.pointcut.scope;
        if (name == "")
            name = tplTree.prototype.rtype.name.scope;
        if (rtxTypeCheck_ItfNameDefinesPointcut(chunk.pointcut,
                                                name) == false)
        {
            traceLine(RED + "[Error] Pointcut '"
                      + rtxRTypeName<chunk.pointcut.type>(chunk.pointcut)
                      + "' has never been defined." + DEFAULT_COLOR);
            increment(errcount);
        }
    }

    if (errcount != 0)
        return false;
    return true;
}


/**
 *
 * This function takes a Rtype node and a template's tree as parameters.
 *
 * Then it checks whether the template complies to the constraints
 * put upon it by the associated interface:
 *  - For a type : is the mapping fully compliant ?
 *                 Are all the implemented mappings valid (for the itf) ?
 *  - For a sequence : Are the mandatory chunks/pointcuts implemented ?
 *                     Are the non-mandatory chunks valid in the context ?
 *
 *      UNKOWN : How to manage non-mandatory pointcuts ?
 *
 */
function        rtxTypeCheck_Template(tplRtype : node, tplTree : node)
{
    local fullTplProto = rtxRTypeName<tplRtype.type>(tplRtype);
    local itfName = tplRtype.name.scope;
    local itfNode;
    local itfTree;

    // Load the itf's tree...
    if (rtxLink_findInterface(itfName, itfNode) == false)
    {
        traceLine(RED + "[Error] Interface '" + itfName + "' containing the template"
                  + " could not be found within the cache." + DEFAULT_COLOR);
        return false;
    }
    if (rtxLink_LoadItem(itfNode, itfTree, false) == false)
    {
        traceLine(RED + "[Error] Could not load interface's '"+itfName+"' tree." + DEFAULT_COLOR);
        return false;
    }

    // For each template in interface, check it.
    foreach item in itfTree.body.block
    {
        // Then it's either : a type, a sequence or a builtintype
        if (existVariable(item.rtype))
        {
            local fullItfProto = rtxRTypeName<item.rtype.type>(item.rtype);
            if (fullTplProto == fullItfProto)
            {
                return rtxTypeCheck_TemplateSpec<item.specifier>(tplRtype, tplTree,
                                                                 item);
            }
        }
    }
    return false;
}



#end    /* !existFunction(rtxInterfaces_version) */
