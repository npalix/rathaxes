Tests Backend :
 * Derouler la boucle de foreach du codeworker généré.                  <= DONE
 * Fouiller du côté du link afin de :
   * Designer une API pour rtxLink (registering, retrieving, etc)       <= DONE
   * Faker un cache pour rtxLink                                        <= DONE
 * Tester l'evaluation de templates qui s'appellent pour :
   * Resoudre les templates imbriqués avec les fonctions inject etc...  <= DONE
   * Commencer à tisser les bouts d'ast entre eux

A rajouter :
 * Introspection du c_tree avant l'inject pour former le resolverValues "local".

A reflechir :
 * Comment tisser des bouts d'ast (avec l'histoire de block node etc...)
 * Commencer a regarder pour le Middle-End










 USE CASES AND COMPILATION STEPS :

1) Rathaxes maintainer (.rti <=> Interfaces)
  * Parsing
  * Type and dependencies checking
  * Registration

2) System developer (.blt <=> Templates)
  * Parsing
  * Prototype Typechecking (prototypes vs interfaces)
  * Placeholders Extraction (every "${ ... }")
  * Placeholders Parsing
  * C code introspection (building the "local" template variable)
  * Body Typechecking (validity of the template variables use)
  * Registration

3) Driver developer (.rtx <=> Drivers)
  * Parsing
  * Dynamic Parsing (with interfaces)
  * Template selection (with Configuration)
  * Template instanciation and resolution (recursive)
     * Building "ResolverValues" (mapping for the template variables)
     * Resolve Placeholders
     * Weave ASTs for recursive cases ("link" and "each" keywords)
  * Generation
