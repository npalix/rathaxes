// Define some color if available
#include "misc/colors.cws"

/*
 * Include Parsing dependencies.
 */
#include "cwTool.inc.cws"
#include "cnorm.inc.cws"
#include "cnorm2c/cnorm2c.inc.cws"
#include "patchLib/cnormPatchLib.inc.cws"
#include "rtxNode/rtxNode.inc.cws"

/*
 * Include the cache-managing script
 */
#include "rtxLink.inc.cws"

/*
 * Include the backend annotation passes for the AST.
 */
#include "rtxTpl/rtxCompile.inc.cws"
#include "rtxTpl/rtxMeta.inc.cws"
#include "rtxTpl/rtxGen.inc.cws"

global RATHAXES_PATH = _ARGS[0];
global BACKLIB_PATH  = RATHAXES_PATH + "/" + "backend_library" + "/";
global SCRIPTS_PATH  = RATHAXES_PATH + "/" + "compiler"        + "/";
global CACHE_PATH    = RATHAXES_PATH + "/" + "cache"           + "/";

global OPERATION = _ARGS[1];
if (toLowerString(OPERATION) == "generate")
{
    local target_os = toLowerString(_ARGS[2]);
    traceLine("The driver generation is not implemented yet.");
}
else if (   toLowerString(OPERATION) == "blt-check"
         || toLowerString(OPERATION) == "blt-register")
{
    local inputFile = _ARGS[2];
    local source;

    // Load cache first
    if (rtxLink_LoadCache(CACHE_PATH) == false)
        error("Could not load cache !");

    // Parse the file
    cnormDialect<"__std__">(source);
    parseAsBNF("rtxParse/rtx.cwp", source, inputFile);
    removeVariable(source.dialect);
    if (!isEmpty(source.error))
    {
        local out = endl() + "An error Occured while parsing :" + endl() + "Trace:" + endl();
        foreach stack_line in source.error[0].trace
            out += stack_line;
        out += endl() + "Error: " + source.error[0].msg;
        traceLine(out);
        exit(-1);
    }

    // Compile the placeHolders
    foreach item in source.block
        rtxTpl_walk<item.type>(item);
    local has_error = false;
    foreach item in source.block
    {
        rtxMeta_walk<item.type>(item);
        if (!isEmpty(item.error))
        {
            traceLine("Item of type '"+item.type+"' could not be parsed :"
                      + endl() + item.error);
            has_error = true;
        }
    }
    if (has_error)
    {
        exit(-1);
    }

    // Now generate the trees and codeworker files
    foreach item in source.block
    {
        local uid = 0;
        rtxGen<item.type>(item, uid);
        uid = $uid + 1$;
    }

    // And register the whole thing into the cache session.
    if (rtxLink_RegisterToCache(source) == false)
    {
        error("01_test_back.cws: Could not register blt into the cache !");
    }

    if (toLowerString(OPERATION) == "blt-register")
    {
        if (rtxLink_SaveCache(CACHE_PATH) == false)
            error("Could not save cache !");
    }
}
else
{
    traceLine(  "Usage: rathaxes generate (linux|openbsd|windows) file.rtx" + endl()
              + "    or rathaxes blt-check (file.blt|file.rtx)" + endl()
              + "    or rathaxes blt-register (file.blt|file.rtx)");
    exit (-1);
}

exit (0);
