rtx_stmt<"interface">(theBlock : node) ::=
    #pushItem(theBlock.block)
    => local lastNode;
    #check(cnormNodeBlock_GetLastNode(theBlock, lastNode))
    => local inheritNode;
    => local body;

    #readIdentifier:name
    #check(rtxNodeItf(lastNode, name, inheritNode, body))
    [inheritance(inheritNode)]?
    '{'
        [ rtx_itf_declaration(body, lastNode.types) ]*
    '}'
    => insert lastNode#root.interfaces[name] = $getArraySize(lastNode#root.interfaces) - 1$;
;

inherit(theNode : node) ::=
    #pushItem(theNode)
    #readIdentifier:theNode#back
;

inheritance(theNode : node) ::=
    ':' inherit(theNode) [',' inherit(theNode)]*
;

rtx_itf_qualifier ::=
    "provided" | "required" | "optional"
;

rtx_itf_type ::=
    "sequence" | "variable" | "type" | "builtintype"
;

rtx_itf_declaration(theBlock : node, nameList : node) ::=
    #pushItem(theBlock.block)
    => local lastNode;
    #check(cnormNodeBlock_GetLastNode(theBlock, lastNode))

    => local qualifier;
    => local sStmt;
    => local rtype;

    rtx_itf_qualifier:qualifier
    rtx_itf_type:sStmt
    #check(rtxNodeItfDeclaration(lastNode, qualifier, sStmt, rtype))
    rtx_itf_stmt<sStmt>(lastNode, rtype) ';'
    => rtxItfAddTypeToList<lastNode.specifier>(lastNode, nameList);
;

rtx_type_list(theDecl : node, theRtype : node) ::=
    #pushItem(theDecl)
    #readIdentifier:theDecl#back ';'
;

rtx_itf_stmt<"type">(theDecl : node, theRtype : node) ::=
    => local nameNode;
    => local params;
    rtx_scoped_identifier(nameNode)
    #check(rtxNodeRType(theRtype, nameNode, params))
    ['{' [ rtx_type_list(theDecl, theRtype) ]* '}']?
;

rtx_itf_stmt<"builtintype">(theDecl : node, theRtype : node) ::=
    => local nameNode;
    => local params;
    rtx_scoped_identifier(nameNode)
    #check(rtxNodeRType(theRtype, nameNode, params))
;

rtx_itf_stmt<"variable">(theDecl : node, theRtype : node) ::=
    => local typeNode;
    => local params;
    rtx_scoped_identifier(typeNode)
    #readIdentifier:sName
    #check(rtxNodeRType(theRtype, typeNode, params))
    #pushItem(theDecl.identifiers)
    => theDecl.identifiers#back = sName;
;

rtx_itf_stmt<"sequence">(theDecl : node, theRtype : node) ::=
    rtx_template_prototype(theRtype, theDecl.identifiers)
;
