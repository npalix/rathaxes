
// TODO: move from rtxBack the root of grammar in a dispatcher

rtx_stmt<"interface">(theBlock : node) ::=
    #pushItem(theBlock.block)
    => local lastNode;
    #check(cnormNodeBlock_GetLastNode(theBlock, lastNode))
    => local inheritNode;
    => local body;

    #readIdentifier:name
    #check(rtxNodeItf(lastNode, name, inheritNode, body))
    [inheritance(inheritNode)]?
    '{'
        [rtx_itf_declaration(body)]*
    '}'
;

inherit(theNode : node) ::=
    #pushItem(theNode)
    #readIdentifier:theNode#back
;

inheritance(theNode : node) ::=
    ':' inherit(theNode) [',' inherit(theNode)]*
;

rtx_itf_qualifier ::=
    "provided" | "required" | "optional"
;

rtx_itf_type ::=
    "sequence" | "variable" | "type" | "builtintype"
;

rtx_itf_declaration(theBlock : node) ::=
    #pushItem(theBlock.block)
    => local lastNode;
    #check(cnormNodeBlock_GetLastNode(theBlock, lastNode))

    => local qualifier;
    => local sStmt;
    => local block;
    #check(rtxNodeItfDeclaration(lastNode, qualifier, sStmt, block))
    rtx_itf_qualifier:qualifier
    rtx_itf_type:sStmt
    rtx_itf_stmt<sStmt>(block, sStmt) ';'
;

rtx_type_list(theNode : node) ::=
    #pushItem(theNode)
    #readIdentifier:theNode#back ';'
;

rtx_itf_stmt<"type">(theNode : node) ::=
    #readIdentifier:theNode.name ['{' [rtx_type_list(theNode.rtype)]* '}']?
;

/* rtx_itf_stmt<"builtintype">(theNode : node) ::= */
/*     #readIdentifier:theNode.name */
/* ; */

rtx_itf_stmt<"variable">(theNode : node, sStmt : value) ::=
    #readIdentifier:sType #readIdentifier:sName
    #check(rtxNodeItfStmt(theNode, sStmt))
    #check(rtxNodeItfRType(theNode.rtype, sType, sName))
;

/* rtx_seq_param ::= */
/*     #readIdentifier:sType [#readIdentifier:sName]? */
/* ; */

/* rtx_seq_parameter(theNode : node) ::= */
/*     '(' rtx_seq_param [',' rtx_seq_param]* ')' */
/* ; */

/* rtx_itf_stmt<"sequence">(theNode : node) ::= */
/*     #readIdentifier:theNode.name rtx_seq_parameter(theNode.rtype) */
/* ; */
