/*
 *
 * This file requires the following rules to be defined :
 * - identifier
 *
 */

// This rule dissects an identifier in parts separated by dots.
rtx_composed_identifier(theNode : node) ::=
    identifier:varId
    // Create the node from
    #check(rtxNodeVar(theNode, varId))
    [
        '.' identifier:curField
        // add the field into the block
        #check(rtxNodeVar_AddIdentifier(theNode, curField))
    ]*
;

// Here we can identify a list of template variables
rtx_var_list(theBlock : node) ::=
/**/=> local lastNode;
    rtx_composed_identifier(lastNode)
    #check(rtxNodeVarList_AddNode(theBlock, lastNode))
    [
        ','
/**/    => local lastVar;
        rtx_composed_identifier(lastVar)
        #check(rtxNodeVarList_AddNode(theBlock, lastVar))
    ]*
;

rtx_serial_sep ::=
    '.' | '_' | '-'
;
rtx_serial_unit ::=
    ['a'..'z' | 'A'..'Z' | '0'..'1']+
;

rtx_serial(theSerial : node) ::=
    #!ignore
    #pushItem(theSerial)
    rtx_serial_unit:sElement
/**/=> local unit;
    #check(rtxNodeSerialUnit(unit, sElement))
    #check(rtxNodeSerial_AddUnit(theSerial, unit))
    [
        rtx_serial_sep:sSep
/**/    => local theSeparator;
        #check(rtxNodeSerialSep(theSeparator, sSep))
        rtx_serial_unit:sElem
/**/    => local theUnit;
        #check(rtxNodeSerialUnit(theUnit, sElem))
        #check(rtxNodeSerial_AddUnit(theSerial, theSeparator))
        #check(rtxNodeSerial_AddUnit(theSerial, theUnit))
    ]*
    #ignore
;
