with PCI, LKM, Log
{
    template type   PCI::AbstractDevice()
    {
        decl    data_types()
        {
            struct pci_dev data;
        }

        chunk   LKM::includes()
        {
            #include <linux/pci.h>
        }

        method  init(PCI::AbstractDevice)
        {
        }

        method  set_context(Builtin::symbol ctx)
        {
            pci_set_drvdata(&${self}->data, ${ctx});
        }

        map
        {
            data: ${self}->data;
            drv_data: pci_get_drvdata(&${self}->data);
        }
    }

    template type   PCI::Device()
    {
        decl    data_types()
        {
            ${PCI::AbstractDevice}      *pdev;
            int                         bars;
            /* It could be an array at some point: */
            unsigned char /* __iomem */ *ioaddr;
            void                        *context;
        }

        chunk   LKM::prototypes()
        {
            static int  rtx_pci_device_enable(${PCI::Device} *);
            static void rtx_pci_device_disable(${PCI::Device} *);
        }

        chunk   LKM::code()
        {
            static int rtx_pci_device_enable(${PCI::Device} *self)
            {
                int error;
                ${PCI::AbstractDevice}  *enable_pdev = self->pdev;
                ${cast local.enable_pdev as PCI::AbstractDevice};
                error = pci_enable_device(&${local.enable_pdev.data});
                if (error)
                    return error;
                error = pci_request_selected_regions(&${local.enable_pdev.data}, self->bars, ${config.name});
                if (error)
                    return error;
                pci_set_master(&${local.enable_pdev.data});
                return 0;
            }

            static void rtx_pci_device_disable(${PCI::Device} *self)
            {
                ${PCI::AbstractDevice}  *disable_pdev = self->pdev;
                ${cast local.disable_pdev as PCI::AbstractDevice};
                if (self->ioaddr)
                    iounmap(self->ioaddr);
                pci_release_selected_regions(&${local.disable_pdev.data}, self->bars);
                pci_disable_device(&${local.disable_pdev.data});
            }
        }

        method  init(PCI::AbstractDevice pdev)
        {
            ${PCI::AbstractDevice} * workaround = (${PCI::AbstractDevice}*)pdev;
            ${cast local.workaround as PCI::AbstractDevice};
            ${self}->pdev = ${pdev};
            ${self}->bars = pci_select_bars(&${local.workaround.data}, IORESOURCE_MEM);
            ${self}->ioaddr = NULL;
            ${self}->context = NULL;
        }

        method  enable()
        {
            rtx_pci_device_enable(${self});
        }

        method  disable()
        {
            rtx_pci_device_disable(${self});
        }

        method  select_ioaddr(Builtin::number bar)
        {
            ${PCI::AbstractDevice} *select_ioaddr_pdev = ${self}->pdev;
            ${cast local.select_ioaddr_pdev as PCI::AbstractDevice};
            ${self}->ioaddr = pci_ioremap_bar(&${local.select_ioaddr_pdev.data}, ${bar});
        }

        method  set_context(Builtin::symbol ctx)
        {
            ${self}->context = ctx;
        }

        map
        {
            context: ${self}->context;
            device: &${self}->pdev->data.dev;
            pci_device: ${self}->pdev;
            irq: ${self}->pdev->data.irq;
            bars: ${self}->bars;
            ioaddr: ${self}->ioaddr;
            BAR_0: 0;
         }
     }
 
    template sequence   probe()
    {
        chunk LKM::prototypes()
        {
            static int /* __devinit */  rtx_pci_probe(struct pci_dev *,
                                                      const struct pci_device_id *);
        }

        chunk LKM::code()
        {
            static int /* __devinit */  rtx_pci_probe(struct pci_dev *pdev,
                                                      const struct pci_device_id *pdev_id)
            {
                int error;
                ${PCI::Device} *rtx_pci_dev;
                ${PCI::AbstractDevice}  *rtx_pdev = (${PCI::AbstractDevice}*)pdev;
                ${cast local.rtx_pdev as PCI::AbstractDevice};

                rtx_pci_dev = kmalloc(sizeof(*rtx_pci_dev), GFP_KERNEL);
                if (!rtx_pci_dev)
                {
                    ${Log::info("cannot allocate the pci device context")};
                    error = -ENOMEM;
                    goto fail;
                }

                /*
                 * XXX: I'm getting placeholder in the generated code if I don't
                 * open a scope here:
                 */
                {
                    ${local.rtx_pci_dev.init(local.rtx_pdev)};
                }

                /* ${local.pdev.set_context(local.rtx_pci_dev)}; */
                pci_set_drvdata(pdev, rtx_pci_dev);

                /* ${local.rtx_pci_dev.enable()}; */
                error = rtx_pci_device_enable(rtx_pci_dev);
                if (error)
                {
                    ${Log::info("rtx_pci_device_enable failed")};
                    goto fail;
                }

                /* ${local.rtx_pci_dev.select_ioaddr(local.rtx_pci_dev.BAR_0)}; */
                rtx_pci_dev->ioaddr = pci_ioremap_bar(
                    pdev, ${local.rtx_pci_dev.BAR_0}
                );
                if (!${local.rtx_pci_dev.ioaddr})
                {
                    ${Log::info("can't map the device address space")};
                    error = 1; /* XXX anything more approriate? */
                    goto fail;
                }

                /*
                 * XXX: We have to cast here because the compiler is
                 * confused by the fact that rtx_pci_dev is a
                 * pointer.
                 */
                ${cast local.rtx_pci_dev as PCI::Device};
                ${pointcut PCI::pci_probe_hook(local.rtx_pci_dev)};

                return 0;

            fail:
                /* ${local.pdev.set_context(NULL)}; */
                pci_set_drvdata(pdev, NULL);
                kfree(rtx_pci_dev);
                return error;
            }
        }

        /* This chunk should be removed (see #26) */
        chunk   ::CALL()
        {
        }
    }

    template sequence   remove()
    {
        chunk LKM::prototypes()
        {
            static void rtx_pci_remove(struct pci_dev *);
        }

        chunk LKM::code()
        {
            static void rtx_pci_remove(struct pci_dev *pdev)
            {
                ${PCI::AbstractDevice}  *rtx_pdev = (${PCI::AbstractDevice}*)pdev;
                ${cast local.rtx_pdev as PCI::AbstractDevice};
                ${PCI::Device} *rtx_pci_dev = ${rtx_pdev.drv_data};

                BUG_ON(!rtx_pci_dev);

                /* XXX: compiler confused by the pointer type. */
                ${cast local.rtx_pci_dev as PCI::Device};
                ${pointcut PCI::pci_remove_hook(local.rtx_pci_dev)};

                /* ${local.rtx_pci_dev.disable()}; */
                rtx_pci_device_disable(rtx_pci_dev);
            }
        }

        /* This chunk should be remove (see #26) */
        chunk   ::CALL()
        {
        }
    }

    template sequence   register()
    {
        chunk LKM::data()
        {
            static struct pci_device_id rtx_pci_device_table[] = {
                { ${config.vendor_id}, ${config.product_id}, PCI_ANY_ID, PCI_ANY_ID },
                { 0, }
            };

            static struct pci_driver rtx_pci_driver = {
                .name = ${config.name},
                .id_table = rtx_pci_device_table,
                .probe = rtx_pci_probe,
                .remove = rtx_pci_remove
            };
        }

        chunk LKM::init_bus_hook()
        {
            int error;
            if ((error = pci_register_driver(&rtx_pci_driver)))
            {
                 ${Log::info("Cannot register pci driver")};
                 /*
                  * So we catched the error but how do we return it to the
                  * parent context?
                  *
                  * Here we know that we can just return error, but that's just
                  * a coincidence (and, in this case, *we* wrote the parent
                  * context).
                  */
                 return error;
            }
        }

        chunk ::CALL()
        {
            /*
             * The implementation of ::CALL is empty. This template sequence is
             * actually not provided nor required.
             *
             * This sequence is just "intermediate" code that will just inject
             * itself in the hook LKM::init_bus_hook for which this sequence
             * has a chunk (see above chunk).
             *
             * -> Should be removed see #26
             */
        }
    }

    template sequence   unregister()
    {
        chunk   LKM::deinit_bus_hook()
        {
            pci_unregister_driver(&rtx_pci_driver);
        }

        /* This chunk should be removed */
        chunk ::CALL()
        {
        }
    }
}
