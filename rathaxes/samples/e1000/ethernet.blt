with Ethernet, PCI, LKM, Log, Builtin
{
    template type   Ethernet::ProtocolId()
    {
        decl data_types()
        {
            unsigned short  id;
        }

        chunk LKM::prototypes()
        {
            static const char   *rtx_ethernet_protocol_id_to_str(unsigned short);
        }

        chunk LKM::data()
        {
            static const struct
            {
                unsigned short  id;
                const char      *name;
            } rtx_ethernet_proto_table[] =
            {
                { ETH_P_IP,     "IPv4"  },
                { ETH_P_IPV6,   "IPv6"  },
                { ETH_P_ARP,    "ARP"   },
            };
        }

        chunk LKM::code()
        {
            static const char   *rtx_ethernet_protocol_id_to_str(unsigned short proto_id)
            {
                for (int i = 0;
                     i != sizeof(rtx_ethernet_proto_table) / sizeof(rtx_ethernet_proto_table[0]);
                     i++)
                    if (proto_id == rtx_ethernet_proto_table[i].id)
                        return rtx_ethernet_proto_table[i].name;

                return "Unknown";
            }
        }

        map
        {
            id: ${self}.id;
            str: rtx_ethernet_protocol_id_to_str(${self}.id);
        }
    }

    template type   Ethernet::AbstractDevice()
    {
        decl  data_types()
        {
            struct net_device   data;
        }

        chunk LKM::includes()
        {
            #include <linux/netdevice.h>
        }

        method  init(Builtin::symbol dev)
        {
            ${self} = (${Ethernet::AbstractDevice} *)${dev};
        }

        map
        {
            k_net_dev: ((struct net_device *)${self});
            /* This could be another init method for Ethernet::Device: */
            rtx_ether_ctx: netdev_priv((struct net_device *)${self});
        }
    }

    template type   Ethernet::Device()
    {
        decl  data_types()
        {
            /*
             * I think it's useless to use the ${PCI::AbstractDevice} "abstraction"
             * here, since we already are in a Linux specific context.
             */
            ${PCI::AbstractDevice.ref}          pci_dev;
            ${Ethernet::AbstractDevice.ref}     net_dev;

            /*
             * In the long-term, this may disappear for a new concept allowing
             * to embbed a descriptor defined and manipulated by the front-end
             */
            ${pointcut Ethernet::HardwareContext()};
        }

        chunk LKM::includes()
        {
            #include <linux/etherdevice.h>
        }

        /* XXX: if the first arg is not called rtx_net_dev, it breaks. */
        method init(Ethernet::AbstractDevice rtx_net_dev, PCI::AbstractDevice pci_dev)
        {
            ${self} = ${rtx_net_dev.rtx_ether_ctx}; 
            /*
             * We can use -> because we know that ${self} will be always a
             * pointer, but the ambiguity sucks.
             */
            ${self}->pci_dev = ${pci_dev};
            ${self}->net_dev = ${rtx_net_dev};
        }

        map
        {
            /*
             * XXX: I'd like to be able to do things like:
             * device: ${self.pci_dev.k_pci_dev}->dev;
             *
             * Also, using ${PCI::AbstractDevice} instead of directly struct
             * pci_dev doesn't work.
             */
            device: (&((struct pci_dev *)(${self})->pci_dev)->dev);
            pci_device: ${self}->pci_dev;
            net_device: ${self}->net_dev;
            perm_addr: ((struct net_device *)(${self})->net_dev)->perm_addr;
            dev_addr: ((struct net_device *)(${self})->net_dev)->dev_addr;
            irq: ((struct pci_dev *)(${self})->pci_dev)->irq;
        }
    }

    template sequence   Ethernet::open(Ethernet::Device dev)
    {
        chunk   LKM::includes()
        {
            #include <linux/interrupt.h>
        }

        chunk LKM::prototypes()
        {
            static int  rtx_ethernet_open(struct net_device *);
        }

        chunk LKM::code()
        {
            static int  rtx_ethernet_open(struct net_device *dev)
            {
                /*
                 * XXX The casts are here because the compiler doesn't resolve
                 * "enclosed" type (e.g: local.var.enclosed) correctly.
                 */
                ${Ethernet::AbstractDevice.ref} rtx_net_dev;
                { /* XXX: I end up with a placeholder if I don't open a scope */
                    ${local.rtx_net_dev.init(local.dev)};
                }
                ${Ethernet::Device.ref} rtx_ether_ctx = ${local.rtx_net_dev.rtx_ether_ctx};

                int error;
                {
                    ${Log::info("installing the interrupt handler")};
                }
                error = request_irq(${local.rtx_ether_ctx.irq},
                                    rtx_ethernet_interrupt_handler,
                                    IRQF_SHARED,
                                    ${config.name},
                                    dev);
                if (error)
                {
                    ${Log::info("Cannot register the interrupt handler")};
                    return error;
                }
                ${pointcut ::IMPLEMENTATION(local.rtx_ether_ctx)};

                return 0;
            }
        }
    }

    template sequence   Ethernet::send(Ethernet::Device dev, Socket::AbstractSKBuff skb)
    {
        chunk LKM::prototypes()
        {
            static int  rtx_ethernet_xmit(struct sk_buff* skb, struct net_device *dev);
        }

        chunk LKM::code()
        {
            static int  rtx_ethernet_xmit(struct sk_buff* kernel_skb, struct net_device *net_dev)
            {
                ${Ethernet::Device.ref} rtx_ether_ctx = netdev_priv(net_dev);
                ${Socket::AbstractSKBuff.ref} rtx_skb = (${Socket::AbstractSKBuff.ref}) kernel_skb;

                ${pointcut ::IMPLEMENTATION(local.rtx_ether_ctx, local.rtx_skb)};
            }
        }
    }

    template sequence   Ethernet::close(Ethernet::Device dev)
    {
        chunk LKM::prototypes()
        {
            static int  rtx_ethernet_close(struct net_device *);
        }

        chunk LKM::code()
        {
            static int  rtx_ethernet_close(struct net_device *dev)
            {
                ${Ethernet::AbstractDevice.ref} rtx_net_dev;
                { /* XXX: I end up with a placeholder if I don't open a scope */
                    ${local.rtx_net_dev.init(local.dev)};
                }

                ${Ethernet::Device.ref} rtx_ether_ctx = ${local.rtx_net_dev.rtx_ether_ctx};

                /* TODO: change this pointcut into a pointcut/adapter/callback: */
                {
                    ${pointcut ::IMPLEMENTATION(local.rtx_ether_ctx)};
                }

                free_irq(${local.rtx_ether_ctx.irq}, dev);
                {
                    ${Log::info("interrupt handler free'ed")};
                }

                return 0;
            }
        }
    }

    template sequence   Ethernet::interrupt_handler(Ethernet::Device dev)
    {
        /*
         * We can't use the irqreturn_t type here because CNornm doesn't know
         * it.
         */
        chunk LKM::prototypes()
        {
            static enum irqreturn   rtx_ethernet_interrupt_handler(int, void *);
        }

        chunk LKM::code()
        {
            static enum irqreturn   rtx_ethernet_interrupt_handler(int irq, void *dev_id)
            {
                ${Ethernet::AbstractDevice.ref} rtx_net_dev = dev_id;
                ${Ethernet::Device.ref} rtx_ether_ctx;
                rtx_ether_ctx = ${local.rtx_net_dev.rtx_ether_ctx};

                ${pointcut ::IMPLEMENTATION(local.rtx_ether_ctx)};

                return IRQ_NONE;
            }
        }
    }

    template sequence   Ethernet::init()
    {
        chunk LKM::data()
        {
            static const struct net_device_ops  rtx_ether_ops =
            {
                .ndo_open = rtx_ethernet_open,
                .ndo_stop = rtx_ethernet_close,
                .ndo_start_xmit = rtx_ethernet_xmit,
            };
        }

        /*
         * NOTE: for now, the error handling is leaking from PCI::probe(), but
         * it's better than doing it at all.
         *
         * XXX: the chunk argument isn't correctly expanded by the
         * compiler I have to use the same name as the actual C
         * variable:
         */
        chunk PCI::pci_probe_hook(PCI::Device rtx_pci_dev)
        {
            ${Ethernet::AbstractDevice.ref} rtx_net_dev;
            ${Ethernet::Device.ref} rtx_ether_ctx;

            rtx_net_dev = (${Ethernet::AbstractDevice.ref})alloc_etherdev(sizeof(*rtx_ether_ctx));
            if (!rtx_net_dev)
            {
                ${Log::info("cannot allocate the ethernet device context")};
                error = -ENOMEM;
                goto fail;
            }
            SET_NETDEV_DEV(${local.rtx_net_dev.k_net_dev}, ${rtx_pci_dev.device});
            strlcpy(${local.rtx_net_dev.k_net_dev}->name,
                    ${config.ifname},
                    sizeof(${local.rtx_net_dev.k_net_dev}->name));
            ${local.rtx_net_dev.k_net_dev}->irq = ${rtx_pci_dev.irq};
            ${local.rtx_net_dev.k_net_dev}->netdev_ops = &rtx_ether_ops;

            error = register_netdev(${local.rtx_net_dev.k_net_dev});
            if (error)
            {
                ${Log::info("cannot register the driver in the net subsystem")};
                goto fail;
            }

            /* Initialize our context held by the net_device structure */
            /*
             * XXX: the cast is here because the compiler resolve the
             * type of rtx_pci_dev.pci_device to the type of
             * rtx_pci_dev instead of the type of rtx_pci_dev.pci_device.
             */
            ${PCI::AbstractDevice.ref} workaround = ${rtx_pci_dev.pci_device};
            ${cast local.workaround as PCI::AbstractDevice};
            { /* XXX: I end up with a placeholder if I don't open a scope */
                ${local.rtx_ether_ctx.init(local.rtx_net_dev, local.workaround)};
            }

            /* Register ourselves in the parent context: */
            /* ${rtx_pci_dev.set_context(local.rtx_ether_ctx)}; */
            ${rtx_pci_dev}->context = rtx_ether_ctx;

            /*
             * XXX: the asssignments/casts are here to circumvent
             * typing issues in the compiler (see previous XXX).
             */
            int bars = ${rtx_pci_dev.bars};
            unsigned char /* __iomem */ *ioaddr = ${rtx_pci_dev.ioaddr};
            ${cast local.bars as Builtin::number};
            ${pointcut Ethernet::adapter_init_context(local.rtx_ether_ctx,
                                                      local.bars,
                                                      local.ioaddr)};
            ${pointcut Ethernet::adapter_reset(local.rtx_ether_ctx)};
            ${pointcut Ethernet::adapter_load_mac_address(local.rtx_ether_ctx)};
            memcpy(${local.rtx_ether_ctx.perm_addr},
                   ${local.rtx_ether_ctx.dev_addr},
                   ${local.rtx_net_dev.k_net_dev}->addr_len);
        }

        /* This chunk should be removed (see #26) */
        chunk   ::CALL()
        {
        }
    }

    template sequence   Ethernet::exit()
    {
        /*
         * XXX: We have to use the same name as the C variable for
         * the chunk argument...
         */
        chunk   PCI::pci_remove_hook(PCI::Device rtx_pci_dev)
        {
            ${Ethernet::Device.ref} rtx_ether_ctx = ${rtx_pci_dev.rtx_drv_context};
            BUG_ON(!rtx_ether_ctx);

            ${Ethernet::AbstractDevice.ref} rtx_net_dev = ${local.rtx_ether_ctx.net_device};
            unregister_netdev(${local.rtx_net_dev.k_net_dev});
            free_netdev(${local.rtx_net_dev.k_net_dev});
        }

        /* This chunk should be removed (see #26) */
        chunk ::CALL()
        {
        }
    }
}
