interface PCI : LKM, Builtin, Device
{
    required variable Builtin::string  LKM::name;
    required variable Builtin::number  PCI::vendor_id;
    required variable Builtin::number  PCI::product_id;

    provided type   PCI::AbstractDevice
    {
        decl        data_types();

        chunk       LKM::includes();
        method      init(PCI::AbstractDevice);
        method      set_context(Builtin::symbol);

        attribute   Builtin::symbol.scalar data;
        attribute   Builtin::symbol.scalar drv_data;
    }

    provided type   PCI::Device
    {
        decl        data_types();

        chunk       LKM::prototypes();
        chunk       LKM::code();

        method      init(PCI::AbstractDevice);
        method      enable();
        method      disable();
        method      select_ioaddr(Builtin::number);
        method      set_context(Builtin::symbol);

        attribute   Builtin::symbol.scalar      context;
        attribute   Device::AbstractDevice.ref  device;
        attribute   PCI::AbstractDevice.ref     pci_device;
        attribute   Builtin::symbol.ref         ioaddr;
        attribute   Builtin::number.scalar      BAR_0;
        attribute   Builtin::number.scalar      irq;
        attribute   Builtin::number.scalar      bars;
    }

    provided sequence   register()
    {
        provided chunk  ::CALL();
        provided chunk  LKM::data();
        provided chunk  LKM::init_bus_hook();
    }

    provided sequence   unregister()
    {
        provided chunk  ::CALL();
        provided chunk  LKM::deinit_bus_hook();
    }

    provided sequence   probe()
    {
        provided chunk  LKM::prototypes();
        provided chunk  LKM::code();

        provided pointcut   PCI::pci_probe_hook(PCI::Device);
    }

    provided sequence   remove()
    {
        provided chunk  LKM::prototypes();
        provided chunk  LKM::code();

        provided pointcut   PCI::pci_remove_hook(PCI::Device);
    }
}
