interface Ethernet : Socket, PCI, LKM
{
     provided type   ProtocolId
     {
         chunk       LKM::prototypes();
         chunk       LKM::data();
         chunk       LKM::code();
         method      decl();
         method      to_str();
     }

    provided type   AbstractDevice
    {
        chunk       LKM::includes();
        method      decl();
    }

    /*
     * Unlike PCI::Device, Ethernet::Device doesn't match the struct net_device
     * from Linux. Ethernet::Device is the type that we use in the private
     * field of the struct net_device.
     */
    provided type   Device
    {
        chunk       LKM::includes();
        method      decl();
        method      init(Ethernet::AbstractDevice, PCI::Device);
        pointcut    Ethernet::SubContext();
    }

    required variable ::string  ifname;

    required sequence   open(Ethernet::Device)
    {
        provided chunk  LKM::prototypes();
        provided chunk  LKM::code();
    }

    required sequence   send(Ethernet::Device, Socket::AbstractSKBuff)
    {
        provided chunk  LKM::prototypes();
        provided chunk  LKM::code();
    }

    required sequence   close(Ethernet::Device)
    {
        provided chunk  LKM::prototypes();
        provided chunk  LKM::code();
    }

    required sequence   interrupt_handler(Ethernet::Device)
    {
        provided chunk  LKM::prototypes();
        provided chunk  LKM::code();
    }

    provided sequence   init()
    {
        provided chunk  LKM::data();
        provided chunk  PCI::pci_probe_hook(PCI::Device);

        provided pointcut   Ethernet::create_device(PCI::Device, Ethernet::Device);
    }

    provided sequence   exit()
    {
        provided chunk  PCI::pci_remove_hook(PCI::Device);

        provided pointcut   Ethernet::destroy_device(PCI::Device, Ethernet::Device);
    }
}
