#include "cnorm.cwp"

rtx_template_code ::= '$' '{' rtx_link_expression | rtx_ '}' ;


/*
 * This code parses a link syntax.
 * The syntax tree will be formatted as follows :
 *
 *
 * theLink
 *   |
 *   |-->iterable       <-- A boolean == the link is iterating a collection
 *   |
 *   |-->item           <-- The name of the temporary item in a link.each
 *   |
 *   |-->params         <-- The list of parameters to give to the template
 *   |     |
 *   |     |-->[0]
 *   .     .
 *   .     .
 *   .     .
 *   |     |-->[n]
 *   |    _|
 *   |
 *   |-->tplType        <-- The target template type description
 *   |     |
 *   |     |-->name     <-- The template type name (function or type name)
 *   |     |
 *   |     |-->params   <-- types of the parameters (if function template)
 *   |     |    |
 *   |     |    |-->[0]
 *   .     .    .
 *   .     .    .
 *   .     .    .
 *   |     |    |-->[n]
 *   |     |   _|
 *   |    _|
 *  _|
 */
rtx_link_expression(theLink : reference) ::=
    "link"
/**/#insert(theLink.iterable)
/**/=> theLink.iterable = false;
    [
        '.'
        "each"
/**/    => theLink.iterable = true;
        [
            '('
            identifier:sId
            ')'
/**/        #insert(theLink.item)
/**/        => theLink.item = sId;
        ]?
    ]?

    => local paramList;
    [
        rtx_item_list(paramList)
/**/    #insert(theLink.params)
/**/    => setall theLink.params = paramList;
    ]
    
    "to"
    
/**/=> local tplType;
    rtx_template_type(tplType)
/**/#insert(theLink.tplType)
/**/=> setall theLink.tplType = tplType;
;

rtx_template_type(itemType : reference) ::=
    [
        rtx_builtin_type:sType
/**/    #insert(itemType.type)
/**/    #insert(itemType.name)
/**/    => theType.type = "builtin";
/**/    => theType.name = sType;
    |
        rtx_prototype(itemType)
    |
        identifier:sId '.' "type"
/**/    #insert(itemType.type)
/**/    #insert(itemType.name)
/**/    => itemType.type = "typeof";
/**/    => itemType.name = sId;
    ]
;

rtx_prototype(theType : reference) ::=
    identifier:sFuncName
    '('
/**/=> local params;
    [
        identifier:sParamType
/**/    #pushItem(params)
/**/    #insert(params#back.type)
/**/	=> params#back.type = sParamType;
        [
            ','
            identifier:sParamNType
/**/        #pushItem(params)
/**/        #insert(params#back.type)
/**/        => params#back.type = sParamNType;
        ]*
    ]?
    ')'
/**/#insert(theType.type)
/**/#insert(theType.name)
/**/#insert(theType.params)
/**/=> theType.type = "function";
/**/=> theType.name = sFuncName;
/**/=> setall theType.params = params;
;

rtx_builtin_type ::= "register" | "buffer"
;

/*
 * This rule overload allows the template identifier concatenation
 * for Rathaxes.
 */
#overload
rootidentifier ::= #!ignore
    [ 'a'..'z' | 'A'..'Z' | '_' | rtx_template_code ]
    [ 'a'..'z' | 'A'..'Z' | '0'..'9' | '_' | rtx_template_code ]*
;
