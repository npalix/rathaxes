with LKM
{
/*
	GENERATED BY RATHAXES DO NOT EDIT!!!
*/
    ${pointcut LKM::INCLUDE_DEPENDENCIES};
    ${pointcut LKM::GLOBAL_DATA_DECLARATION};
    ${pointcut LKM::GLOBAL_CODE_DEFINITION};
    ${pointcut LKM::BASE_LKM_CODE_DEFINITION};

// END OF FILE
}

with LKM, User
values OS=Linux, version >= 2.6.24
{
    template sequence LKM::load()
    {
    }
}

with LKM, User
values OS=Windows, version = XP
{
    chunk LKM::INCLUDE_DEPENDENCIES
    {
        #include "ntddk.h"
        #include "wdf.h"
        #include "initguid.h"
    }

    template sequence LKM::load()
    {
        chunk   LKM::GLOBAL_CODE_DEFINITION
        {
            NTSTATUS
            EvtDeviceAdd(WDFDRIVER Driver, PWDFDEVICE_INIT DeviceInit)
            {
                NTSTATUS                status;
                WDFDEVICE               device;
                WDFQUEUE                defaultqueue;
                WDF_IO_QUEUE_CONFIG     defaultconfig;
                
                // Registering plug and play callbacks
                WDF_PNPPOWER_EVENT_CALLBACKS pnpPowerCallbacks;
                WDF_PNPPOWER_EVENT_CALLBACKS_INIT(&pnpPowerCallbacks);

// ATTENTION:  SOUS SYSTEME DE ONPLUG???
//pnpPowerCallbacks.EvtDevicePrepareHardware = ${pointcut User::on_plug(Context) INIT_LKM_FPTRS};

		WdfDeviceInitSetPnpPowerEventCallbacks(DeviceInit, &pnpPowerCallbacks);

                status = WdfDeviceCreate(&DeviceInit, WDF_NO_OBJECT_ATTRIBUTES, &device);
                if (!NT_SUCCESS(status))
                {
                    KdPrint((${config.driver_name} "WdfDeviceCreate failed\n"));
                    return (status);
                }
                WDF_IO_QUEUE_CONFIG_INIT_DEFAULT_QUEUE(&defaultconfig, ${config.dispatch_mode});

		${poincut LKM::INIT_LKM_FPTRS(local.defaultconfig)};
                
                status = WdfIoQueueCreate(device, &defaultconfig, WDF_NO_OBJECT_ATTRIBUTES, &defaultqueue);
                if (!NT_SUCCESS(status))
                {
                    KdPrint((${config.driver_name} "WdfIoQueueCreate failed\n"));
                }
                status = WdfDeviceCreateDeviceInterface(device, &GUID_DEVINTERFACE_RATHAXES_SERIAL, NULL);
                return (status);
            }
        }

        chunk LKM::BASE_LKM_CODE_DEFINITION
        {
            NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)
            {
                NTSTATUS status = STATUS_SUCCESS;
                WDF_DRIVER_CONFIG	config;

                KdPrint((${config.device_name} "-->DriverEntry\n"));
                WDF_DRIVER_CONFIG_INIT(&config, EvtDeviceAdd);
                status = WdfDriverCreate(DriverObject,
                                        RegistryPath,
                                        WDF_NO_OBJECT_ATTRIBUTES,
                                        &config,
                                        WDF_NO_HANDLE);
                if (!NT_SUCCESS(status))
                {
                    KdPrint((${config.device_name} " - Error: WdfDriverCreate failed\n"));
                }
                KdPrint((${config.device_name} "<--DriverEntry\n"));
                
                return (status);
            }
        }
    }

    template sequence LKM::unload()
    {
    }
}

with User
values OS=linux, version >= 2.6.24
{
}

with User
values OS=Windows, version = XP
{
    template sequence User::open(Context ctx)
    {
    }

    template sequence User::close(Context ctx)
    {
    }

    template sequence User::read(Context ctx, Buffer buf)
    {
        chunk LKM::GLOBAL_CODE_DEFINITION
        {
            void ${config.device_name}IoRead(WDFQUEUE Queue, WDFREQUEST Request, size_t size)
            {
                WDFMEMORY						memory;
                NTSTATUS						status;
                PUCHAR							output;
                int								current_size = 0;

                /*
                 * Here was included the declaration of pointers on each register...
                 */

                status = WdfRequestRetrieveOutputMemory(Request, &memory);
                if(NT_SUCCESS(status))
                {
                    output = MmAllocateNonCachedMemory(size);
                    memset(output, 0, size);
                    
                    /*
                     * Here was included the code of the associated FRONTEND sequence
                     */
		     ${pointcut ALGO};
                    
                    status = WdfMemoryCopyFromBuffer(memory, 0, output, current_size);	
                    WdfRequestCompleteWithInformation(Request, status, current_size);
                    MmFreeNonCachedMemory(output, size);
                }
                else
                {
                    WdfRequestComplete(Request, status);
                }
            }
        }

        chunk LKM::INIT_LKM_FPTRS(init)
        {
		${init}.EvtIoRead      = &${config.device_name}IoRead;
        }
    }

    template sequence User::write(Context ctx, Buffer buf)
    {
        chunk LKM::GLOBAL_CODE_DEFINITION
        {
            void ${config.device_name}IoWrite(WDFQUEUE Queue, WDFREQUEST Request, size_t size)
            {
                WDFMEMORY					memory;
                NTSTATUS					status;
                PUCHAR						input;
                int                         current_size = 0;

                /*
                 * Here was included the register' declaration
                 */

                KdPrint(("-->EvtIoWrite\n"));
                status = WdfRequestRetrieveInputMemory(Request, &memory);
                if(!NT_SUCCESS(status))
                {
                    KdPrint(("EvtIoWrite Could not get request memory buffer 0x%x\n",
                             status));
                    WdfRequestComplete(Request, status);
                    KdPrint(("<-- EvtDeviceIoWrite\n"));
                    return;
                }
                input = WdfMemoryGetBuffer(memory, &size);
                KdPrint(("Sending a buffer of %d bytes\n", size));

                /*
                 * Here were included the FRONTEND-s algorithms
                 */

                WdfRequestCompleteWithInformation(Request, status, current_size);
                KdPrint(("<--EvtIoWrite\n"));
            }
        }

        chunk LKM::INIT_LKM_FPTRS(init)
        {
		${init}.EvtIoWrite      = &${config.device_name}IoWrite;
        }
    }
}
