device RS232
use Algorithms, LKM, User
{
    register byte rcv_buf mode R like (........) at 0;
    register byte snd_buf mode R like (........) at 0;
    
    register byte IER mode RW like (.........) at 1
    {
        [0] as data_available;
        [1] as transmitter_empty;
        [2] as line_status_change;
        [3] as modem_status_change;
        [4] as sleep_mode;
        [5] as low_power_mode;
    }

    register byte LCR mode RW like (........) at 3
    {
        [0..1] as word_lengh
        {
            (00) -> _5bits;
            (01) -> _6bits;
            (10) -> _7bits;
            (11) -> _8bits;
        }

        [2] as stop_bits
        {
            (0) -> _1stop_bits;
            (1) -> _2stop_bits;
        }

        [3..5] as parity_type
        {
            (000) -> none;
            (001) -> odd;
            (011) -> even;
            (101) -> high;
            (111) -> low;
        }

        [6] as break_signal
        {
            (0) -> disable;
            (1) -> enable;
        }

        [7] as dlab
        {
            (0) -> buffers;
            (1) -> clock;
        }
    }

    register byte MCR mode RW like (****.*..) at 4
    {
        [0] as dtr;
        [1] as rts;
        [2] as ao2;
    }

    register byte DLL mode RW like (........) at 0;

    register byte DLM mode RW like (........) at 1;

    register byte LSR mode RW like (........) at 5
    {
        [0] as data_available
        {
            (0) -> FALSE;
            (1) -> TRUE;
        }

        [1] as overrun
        {
            (0) -> good;
            (1) -> error;
        }

        [2] as parity
        {
            (0) -> good;
            (1) -> error;
        }

        [3] as framing
        {
            (0) -> good;
            (1) -> error;
        }

        [4] as break_signal
        {
            (0) -> FALSE;
            (1) -> TRUE;
        }

        [5] as thr_state
        {
            (0) -> transmitting;
            (1) -> empty_idle;
        }

        [6] as thr_and_line
        {
            (0) -> transmitting;
            (1) -> empty_idle;
        }

        [7] as data_fifo
        {
            (0) -> good;
            (1) -> error;
        }
    }

/*
    public property word divisor
    {
        set
        {
            set(LCR.dlab, clock);
            set(DLL, value[0..7]);
            set(DLM, value[8..15]);
            set(LCR.dlab, buffers);
        }

        get
        {
            set(LCR.dlab, clock);
            set(value[0..7], DLM);
            set(value[8..15], DLL);
            set(LCR.dlab, buffers);
        }
    }
*/
    User::read(User::Context ctx, Algorithms::Buffer output)
    {
        log("my RS232 [read]\n");
//      concat(output, rcv_buf)
//      {
//          PRECONDITION {WAIT(LSR.data_available, TRUE);}
//      }
    }
    User::write(User::Context ctx, Algorithms::Buffer input)
    {
        log("my RS232 [write]\n");
//      copy(snd_buf, input)
//      {
//          PRECONDITION {WAIT(LSR.thr_state.empty);}
//      }
    }
    User::open(User::Context ctx)
    {
        log("my RS232 [open]\n");
    }
    User::close(User::Context ctx)
    {
        log("my RS232 [close]\n");
    }
    User::on_plug(User::Context ctx)
    {
        log("my RS232 [on_plug]\n");
        //set(divisor, 0x0C);
        set(LCR.word_lengh._8bits);
        //set();
    }
}

configuration
{
    LKM::devices = RS232;
    LKM::arch = x86;
    LKM::OS = linux
    {
        LKM::major = 2;
        LKM::minor = 6;
        LKM::patch = 24;
        LKM::version = 2.6.24;
    }

    // Currently, defining a variable twice creates an error.
    //LKM::OS = Windows
    //{
    //    LKM::version = XP;
    //}
}
