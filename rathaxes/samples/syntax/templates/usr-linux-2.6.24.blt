with LKM, User
values LKM::OS=linux, LKM::version >= 2.6.24
{

    template type Device()
    {
        decl LKM::INCLUDE_DEPENDENCIES()
        {
            dev_t   content;
        }

        map {
            self_ptr:   ${self}->content;
        }
    }

    template sequence open(User::Device ctx)
    {
        chunk GLOBAL_CODE_DEFINITION()
        {
            int ${config.devices}_open(dev_t *ctx)
            {
                ${cast local.ctx as User::Device};
                ${pointcut ::IMPLEMENTATION(local.ctx)};
            }
        }
    }

    template sequence close(User::Device ctx)
    {
        chunk LKM::GLOBAL_CODE_DEFINITION()
        {
            int ${config.devices}_open(dev_t *ctx)
            {
                ${cast local.ctx as User::Device};
                ${pointcut ::IMPLEMENTATION(local.ctx)};


                int i = -40;
                do
                {
                    i++;
                } while (i < 0);

                for (i=3; i < 40; ++i)
                {
                    printf("test\n");
                }
            }
        }

        chunk LKM::INIT_LKM_FPTRS()
        {}
    }

    template sequence read(Device ctx, Buffer buf)
    {
        chunk LKM::GLOBAL_CODE_DEFINITION()
        {
            int ${config.devices}_read(dev_t *ctx)
            {
                ${Algorithms::Buffer}   buf;
                ${cast local.ctx as User::Device};
                ${pointcut ::IMPLEMENTATION(local.ctx, local.buf)};
                return (0);
            }
        }

        chunk INIT_LKM_FPTRS()
        {
		    .read      = &${config.devices}_read,
        }
    }

    template sequence write(Device ctx, Buffer buf)
    {
        chunk GLOBAL_CODE_DEFINITION()
        {
            int ${config.devices}_write(dev_t *ctx)
            {
                ${Algorithms::Buffer}   buf;
                ${cast local.ctx as User::Device};
                ${pointcut ::IMPLEMENTATION(local.ctx, local.buf)};
                return (0);
            }
        }

        chunk INIT_LKM_FPTRS()
        {
		    .write      = &${config.devices}_write,
        }
    }
}

