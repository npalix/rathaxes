interface Builtin
{
    provided builtintype        Builtin::string;
    provided builtintype        Builtin::number;
    provided builtintype        Builtin::numser;
    provided builtintype        Builtin::register;
    provided builtintype        Builtin::register_field;
    provided builtintype        Builtin::register_value;
}

interface LKM : Algorithms
{
    provided builtintype        LKM::Device_list;
    provided builtintype		LKM::Symbol;

    provided pointcut           LKM::INCLUDE_DEPENDENCIES;
    provided pointcut           LKM::GLOBAL_DATA_DECLARATION;
    provided pointcut           LKM::GLOBAL_CODE_DEFINITION;

    provided sequence           LKM::load()
    {
        provided pointcut       LKM::INIT_LKM_FPTRS(Symbol); // Symbol is the type of the joinpoint
        provided chunk          LKM::GLOBAL_CODE_DEFINITION;
    }

    provided sequence           LKM::unload()
    {
        provided chunk          LKM::GLOBAL_CODE_DEFINITION;
    }

    required variable LKM::Device_list      LKM::Devices;
    required variable ::string              LKM::OS;
    optional variable ::numser              LKM::version;
    optional variable ::numser              LKM::arch;
}

interface Algorithms : Builtin
{
    provided type               Algorithms::Buffer;

    provided sequence   Algorithms::log(Builtin::string)
    {
        provided chunk   ::CALL; // use current namespace/template from frontend
    }

    provided sequence   set(Builtin::register_value)
    {
        provided chunk  ::CALL; // use current namespace/template from frontend
    }
    provided sequence   set(Builtin::register, Builtin::number)
    {
        provided chunk  ::CALL; // use current namespace/template from frontend
    }
    //...
}

interface User : LKM
{
    provided builtintype        User::Context;//why not device?


    required sequence           User::open(Context)
    {
        provided chunk          LKM::GLOBAL_CODE_DEFINITION;
    }

    required sequence           User::close(Context)
    {
        provided chunk          LKM::GLOBAL_CODE_DEFINITION;
        provided chunk          LKM::INIT_LKM_FPTRS;
    }

    required sequence           User::read(Context, Algorithms::Buffer)
    {
        provided chunk          LKM::GLOBAL_CODE_DEFINITION;
        provided chunk          LKM::INIT_LKM_FPTRS;
    }

    required sequence           User::write(Context, Algorithms::Buffer)
    {
        provided chunk          LKM::GLOBAL_CODE_DEFINITION;
        provided chunk          LKM::INIT_LKM_FPTRS;
    }

    required sequence           User::on_plug(Context)
    {
        provided chunk          LKM::GLOBAL_CODE_DEFINITION;
        provided chunk          LKM::INIT_LKM_FPTRS;
    }
}

//with LKM
//values OS=Linux
//{
//    extend interface
//    {
//        required variable string    type;
//        required variable number    MAJOR;
//        optional variable number    minor;
//    }
//}

//with LKM
//values OS=OpenBSD
//{
//    extend interface
//    {
//        required variable string    type;
//        required variable number    MAJOR;
//        optional variable number    minor;
//    }
//}

//with LKM
//values OS=Windows
//{
//    extend interface
//    {
//        required variable numser    UUID;
//        required variable string    device_name;
//        required variable string    device_guid;
//        required variable string    class_name;
//        required variable string    class_guid;
//        required variable string    dispatch_mode;
//    }
//}
