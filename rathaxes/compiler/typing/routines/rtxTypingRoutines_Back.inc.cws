#if !existFunction(rtxTypingRoutines_Back_version)

function rtxTypingRoutines_Back_version()
{ return "1.0"; }

#include "typing/routines/rtxTypingRoutines_Common.inc.cws"


/**
 *
 * This function takes a RType node for a pointcut and the name of the itf to
 * search into.
 *
 * It then checks whether the pointcut was defined within the interface or not.
 *
 */
function rtxTypeCheck_ItfNameDefinesPointcut(pointcutRtype : node, itfName : node)
{
    local pointcutName = rtxRTypeName<pointcutRtype.type>(pointcutRtype);
    local itfNode;
    local itfTree;

    // If there is no explicit interface, we must check each interface in the dependencies.
    // First, load the interface's tree...
    if (itfName != "")
    {
        if (rtxLink_findInterface(itfName, itfNode) == false)
        {
            traceLine(RED + "[Error] Interface '" + itfName + "' containing the pointcut"
                      + " could not be found within the cache." + DEFAULT_COLOR);
            return false;
        }
        if (rtxLink_LoadItem(itfNode, itfTree, false) == false)
        {
            traceLine(RED + "[Error] Could not load interface's '" + itfName
                      + "' tree." + DEFAULT_COLOR);
            return false;
        }
        if (rtxTypeCheck_ItfDefinesPointcut(pointcutRtype, itfTree) != false)
        {
            pointcutRtype.name.scope = itfName;
            return true;
        }
    }

    // If test did not succeed  AND the interface is not explicitly given:
    if (pointcutRtype.name.scope == "")
    {
        if (pointcutRtype.name.global == false)
        {
            // Then, check for the parent interfaces.
            foreach parent in itfTree.inheritance
            {
                local name = key(parent);
                if (rtxTypeCheck_ItfNameDefinesPointcut(pointcutRtype, name) != false)
                {
                    pointcutRtype.name.scope = name;
                    return true;
                }
            }
        }
        else
        {
            if (pointcutRtype.name.name == "CALL"
                || pointcutRtype.name.name == "IMPLEMENTATION")
                return true;
        }
    }

    return false;
}



////////// TO CHECK
function rtxTypeCheck_ChunkIsBuiltin(pointcut : node, tplNode : node, out_ref_error : node)
{
    // A builtin chunk should be written as "::Something"
    if (pointcut.global == true && pointcut.scope == "")
    {
        if (   (pointcut.name == "CALL" && tplNode.specifier == "sequence") // code of the call of a sequence
            || (pointcut.name == "decl" && (tplNode.specifier == "type" || tplNode.specifier == "builtintype")) // code of type declaration for a rathaxes type
            || (pointcut.name == "init" && (tplNode.specifier == "type" || tplNode.specifier == "builtintype")) // init code for a rathaxes type
            || (pointcut.name == "fini" && (tplNode.specifier == "type" || tplNode.specifier == "builtintype")) // end code for a rathaxes type
           )
        {
            if (tplNode.qualifier != "provided")
            {
                traceLine(RED + "[Error] Builtin pointcut implemented in not provided template." + DEFAULT_COLOR);
                out_ref_error = true;
                return false;
            }
            return true;
        }
    }
    return false;
}

/*
 * This function takes a Rtype node for a chunk and a template tree,
 * and checks whether the chunk was implemented within the template.
 *
 * XXX TODO FIXME
 * The function does not check if the statement is ambiguous:
 * if two interfaces define "PLOP", then defining the chunk "PLOP" will
 * not result in an ambiguous statement, but resolve as the first pointcut
 * encountered.
 */
function rtxTypeCheck_TemplateHasChunk(chunkRtype : node, tpl : node)
{
    local fullPointcut = rtxRTypeName<chunkRtype.type>(chunkRtype);
    foreach item in tpl.body.block
    {
        // If Fully-qulified equals, or if only name matches and not fully qualified
        if (fullPointcut == rtxRTypeName<item.pointcut.type>(item.pointcut)
            || (chunkRtype.name.name == item.pointcut.name.name && item.pointcut.name.scope == ""))
        {
            // Then qualify it.
            item.pointcut.name.scope = chunkRtype.name.scope;
            return true;
        }
    }
    return false;
}


/*
 * This function takes a Rtype node for a pointcut and a template tree,
 * and checks whether the pointcut was defined within the template.
 *
 * XXX TODO FIXME
 * The function does not check if the statement is ambiguous:
 * if the interface declare two "PLOP" for a same template but different scopes,
 * then defining the pointcut "PLOP" will not result in an ambiguous statement,
 * but resolve as the first pointcut encountered.
 */
function rtxTypeCheck_TemplateHasPointcut(pointcutRtype : node, tpl : node)
{
    local dummy;
    local fullPointcut = rtxRTypeFullQualifiedName<"pointcut">(pointcutRtype,dummy);
    foreach chunk in tpl.body.block
    {
        foreach placeHolder in chunk.body.compile
        {
            localref body = placeHolder.node.body;
            if (body.type == "__rtx_pointcut__")
            {
                local fullTplPointcut = rtxRTypeFullQualifiedName<"pointcut">(body.rtype,dummy);
                if (body.rtype.name.name == pointcutRtype.name.name && body.rtype.name.scope == "")
                {
                    local result = true;
                    foreach param in pointcutRtype.params
                    {
                        localref pRtype = body.rtype.params#[index(param)];
                        local nameTpl = rtxRTypeName<pRtype.type>(pRtype);
                        local nameItf = rtxRTypeName<param.type>(param);

                        if (nameTpl != nameItf)
                        {
                            result = false;
                            break ;
                        }
                    }
                    if (result == true)
                    {
                        body.name.scope = pointcutRtype.name.scope;
                        return true;
                    }
                }
                else if (fullTplPointcut == fullPointcut)
                {
                    // Then qualify it
                    body.name.scope = pointcutRtype.name.scope;
                    return true;
                }
            }
        }
    }
    return false;
}

/*
 * This function checks, depending on the type of dependency on the template,
 * that the required builtin chunks are implemented.
 */
function     rtxTypeCheck_TemplateBuiltinItems(tplRtype : node, tplTree : node, itfTplNode : node)
{
    // Here, check the builtin pointcuts.
    if (itfTplNode.qualifier == "required" || itfTplNode.qualifier == "optional")
    {
        local identifier;
        local rtype;
        local dummy;
        rtxNodeIdentifier(identifier, "IMPLEMENTATION", "", true);
        rtxNodeRType(rtype, identifier, dummy);
        if (rtxTypeCheck_TemplateHasPointcut(rtype, tplTree) == false)
        {
            traceLine(RED + "[Error] Sequence template is " + itfTplNode.qualifier
                      + ": It does not provide the necessary pointcut: '"
                      + rtxRTypeName<identifier.type>(identifier) + "'" + DEFAULT_COLOR);
            return false;
        }
    }
    else // case of provided
    {
        local identifier;
        local rtype;
        local dummy;
        rtxNodeIdentifier(identifier, "CALL", "", true);
        rtxNodeRType(rtype, identifier, dummy);
        if (rtxTypeCheck_TemplateHasChunk(rtype, tplTree) == false)
        {
            traceLine(RED + "[Error] Sequence template is " + itfTplNode.qualifier
                      + ": It does not provide the necessary pointcut: '"
                      + rtxRTypeName<rtype.type>(rtype) + "'" + DEFAULT_COLOR);
            return false;
        }
    }
    return true;
}



/*
 *
 * This pack of functions check each type of placeHolder that the Meta pass can analyze
 *
 */
declare function rtxTypeCheck_CheckPlaceholder<T>(placeHolder : node, theChunk : node, itfTree : node);

function rtxTypeCheck_CheckPlaceholder<T>(placeHolder : node, theChunk : node, itfTree : node)
{
    traceLine(RED + "[Error] rtxTypeCheck_CheckPlaceholder: Placeholder type '"+T+"' not type-checked." + DEFAULT_COLOR);
    return false;
}

function rtxTypeCheck_CheckPlaceholder<"__rtx_var__">(placeHolder : node, theChunk : node, itfTree : node)
{
    return true;
}

function rtxTypeCheck_CheckPlaceholder<"__rtx_tpl_chunk_call__">(placeHolder : node, theChunk : node, itfTree : node)
{
    traceLine(YELLOW + "[Warning] Function not implemented : rtxType_CheckPlaceholder<\"__rtx_tpl_chunk_call__\">()."+ DEFAULT_COLOR);
    return true;
}

function rtxTypeCheck_CheckPlaceholder<"__rtx_tpl_sequence_call__">(placeHolder : node, theChunk : node, itfTree : node)
{
    local rtype;
    local param_types;
    rtxNodeRType(rtype, placeHolder.seqName, param_types);
    select type in placeHolder.seqArgs[].rtype
    {
        pushItem param_types;
        setall param_types#back = type;
    }
    
    local itfName;
    if (rtype.name.scope == "")
        itfName = theChunk.pointcut.name.scope;
    else
        itfName = rtype.name.scope;

    local dummy_list;
    local qualifier;
    if (rtxTypeCheck_ItfNameDefinesSequence(rtype, itfName, dummy_list, qualifier) == true)
    {
        // We're trying to call the ::CALL  chunk, so it is mandatory that the sequence is provided
        if (qualifier == "provided")
            return true;
        else
            traceLine(RED + "[Error] The Sequence was found but is a '" + qualifier
                      + "' and thus does not provide the '::CALL' chunk." + DEFAULT_COLOR);
    }

    return false;
}

function rtxTypeCheck_CheckPlaceholder<"__rtx_pointcut__">(placeHolder : node, theChunk : node, itfTree : node)
{
    // 
    // We need to catch the builtins before trying the generic solution
    // 
    localref id = placeHolder.rtype.name;
    if (id.scope == "" && id.global == true)
    {
        switch (id.name)
        {
        case "IMPLEMENTATION":
            localref tplRtype = theChunk#parent#parent#parent.prototype.rtype;
            return rtxTypeCheck_ParametersMatch(tplRtype, placeHolder.rtype, "pointcut");
            break ;
        default:
        }
    }
    return rtxTypeCheck_ItfDefinesPointcut(placeHolder.rtype, itfTree);
}




declare function rtxTypeCheck_TemplateSpec<T>(tplRtype : node, tplTree : node,
                                              interface_list : node);
function rtxTypeCheck_TemplateSpec<T>(tplRtype : node, tplTree : node,
                                      interface_list : node)
{
    error("Function rtxTypeCheck_TemplateSpec<'"+T+"'> is not implemented.");
}

/**
 *
 * This function takes a template rtype, a template tree, and the associated
 * node within the interface.
 *
 * Its role is to check that the mapping indicated in the interface is properly
 * respected in the type template's implementation. This also checks that every
 * mapping implemented inside the template is required by the interface.
 *
 * XXX FIXME TODO
 * Currently, we do not manage the chunks in a type template, we'll hade to
 * Think and design this properly.
 *
 */
function rtxTypeCheck_TemplateSpec<"type">(tplRtype : node, tplTree : node,
                                           interface_list : node)
{
    local errcount = $0$;
    localref tpl_mapping = tplTree.mapping.body.block;
    local tplName = rtxRTypeName<tplRtype.type>(tplRtype);
    local itfTypeNode;
    local itfNode;
    local itfTree;

    // If there are builtin chunks mandatory, check them here.
    if (rtxInterfaceNameHasType(tplRtype, tplRtype.name.scope, interface_list) == false)
        return false;

    // Load the itf's tree in order to refer to it's sequence node.
    if (rtxLink_findInterface(tplRtype.name.scope, itfNode) == false)
    {
        traceLine(RED + "[Error] Interface '" + tplRtype.name.scope
                  + "' containing the template"
                  + " could not be found within the cache." + DEFAULT_COLOR);
        return false;
    }
    if (rtxLink_LoadItem(itfNode, itfTree, false) == false)
    {
        traceLine(RED + "[Error] Could not load interface's '"
                  + tplRtype.name.scope + "' tree." + DEFAULT_COLOR);
        return false;
    }
    ref itfTypeNode = itfTree.types[tplRtype.name.name];

    // Now, check that every mapping is provided by the template,
    foreach mapId in itfTypeNode
    {
        // The mapping ids are the keys in tpl.mapping.body.block
        if (!findElement(mapId, tpl_mapping))
        {
            traceLine(RED + "[Error] Type template " + tplName
                      +" does not implement the required mapping: '"
                      + mapId + "'." + DEFAULT_COLOR);
            increment(errcount);
        }
    }
    // and finally check that no mapping provided is unknown to the interface.
    foreach mapping in tpl_mapping
    {
        local check = false;
        foreach mapId in itfTypeNode
        {
            if (mapId == key(mapping))
            {
                check = true;
                break ;
            }
        }
        if (check != true)
        {
            traceLine(RED + "[Error] Type template " + tplName
                      + " implements an unknown mapping: '"
                      + key(mapping) + "'." + DEFAULT_COLOR);
            increment(errcount);
        }
    }

    if (errcount != "0")
        return false;
    return true;
}


/**
 *
 * This function takes a template rtype, a template tree, and the associated
 * node within the interface.
 *
 * This function checks that a sequence template implements all the required
 * pointcuts and chunks.
 * It also checks that the chunks implemented are linked to valid pointcuts
 * (Meaning that the pointcuts must be defined in the current interface, or
 * in a parent interface. This must not be defined in a child interface).
 *
 * XXX TODO FIXME
 * We still do not know how to manage not-required pointcuts...
 *
 *  if (rtxTypeCheck_ItfNameDefinesSequence(rtype, itfName, dummy, dummy_qual) == true)
 *
 */
function rtxTypeCheck_TemplateSpec<"sequence">(tplRtype : node, tplTree : node,
                                               interface_list : node)
{
    local errcount = $0$;
    local tplName = rtxRTypeName<tplRtype.type>(tplRtype);
    local dummy;
    local tplFullName = rtxRTypeFullQualifiedName<"sequence">(tplRtype, dummy);
    local itfTplNode;
    // Used to load the interface's tree after identifying the sequence
    local itfNode;
    local itfTree;

    // First, check that the prototypes is defined
    if (rtxTypeCheck_ItfNameDefinesSequence(tplRtype, tplRtype.name.scope, interface_list, dummy) == false)
    {
        return false;
    }
    tplFullName = rtxRTypeFullQualifiedName<"sequence">(tplRtype, dummy);

    // Load the itf's tree in order to refer to it's sequence node.
    if (rtxLink_findInterface(tplRtype.name.scope, itfNode) == false)
    {
        traceLine(RED + "[Error] Interface '" + tplRtype.name.scope
                  + "' containing the template"
                  + " could not be found within the cache." + DEFAULT_COLOR);
        return false;
    }
    if (rtxLink_LoadItem(itfNode, itfTree, false) == false)
    {
        traceLine(RED + "[Error] Could not load interface's '"
                  + tplRtype.name.scope + "' tree." + DEFAULT_COLOR);
        return false;
    }
    ref itfTplNode = itfTree.sequences[tplRtype.name.name][tplFullName];

    // Now, check that the template respects what's imposed by the interface
    foreach item in itfTplNode.body.block
    {
        if (item.type == "__rtx_itf_decl__")
        {
            // Is the chunk provided as requested by the interface ?
            if (item.specifier == "chunk"
                && rtxTypeCheck_TemplateHasChunk(item.body.pointcut, tplTree) == false
                && item.qualifier == "provided")
            {
                traceLine(RED + "[Error] Sequence template '" + tplName
                          + "' does not provide the chunk '"
                          + rtxRTypeName<item.body.pointcut.type>(item.body.pointcut) + "'" + DEFAULT_COLOR);
                increment(errcount);
            }
            // Is the pointcut provided as requested by the interface ?
            if (item.specifier == "pointcut"
                && item.qualifier == "provided"
                && rtxTypeCheck_TemplateHasPointcut(item.rtype, tplTree) == false)
            {
                local dummy;
                traceLine(RED + "[Error] Sequence template '" + tplName
                          + "' does not provide the pointcut '"
                          + rtxRTypeFullQualifiedName<"pointcut">(item.rtype,dummy) + "'" + DEFAULT_COLOR);
                    increment(errcount);
            }
        }
    }

    // This function checks the builtin chunks/pointcuts to be implemented depending on required/optional/provided
    if (rtxTypeCheck_TemplateBuiltinItems(tplRtype, tplTree, itfTplNode) == false)
        increment(errcount);

    // Next, we need to check that every non-mandatory chunk actually exists.
    // But... What about non-mandatory pointcuts ?
    foreach chunk in tplTree.body.block
    {
        local builtinCheckError = false;

        // manage not-builtin chunks
        if (rtxTypeCheck_ChunkIsBuiltin(chunk.pointcut, itfTplNode, builtinCheckError) == false
            && builtinCheckError != true)
        {
            local name = chunk.pointcut.name.scope;
            if (name == "" && chunk.pointcut.name.global == false)
            {
                name = tplTree.prototype.rtype.name.scope;
                traceLine("Setting default itf to "+name);
            }
            if (rtxTypeCheck_ItfNameDefinesPointcut(chunk.pointcut, name) == false)
            {
                traceLine(RED + "[Error] Pointcut '"
                          + rtxRTypeName<chunk.pointcut.type>(chunk.pointcut)
                          + "' has never been defined." + DEFAULT_COLOR);
                increment(errcount);
            }

            // The placeHolder checkers need the whole Interface tree, so unwind up to it...
            localref itfTree = itfTplNode;
            while (itfTree.type != "__rtx_itf__") { ref itfTree = itfTree#parent; }
            // Now, in the chunk, let's check every placeHolder...
            select ph in chunk.body.compile[].node
            {
                if (rtxTypeCheck_CheckPlaceholder<ph.body.type>(ph.body, chunk, itfTree) == false)
                {
                    traceLine(RED + "[Error] Placeholder '" + ph#parent.template_expr + "' could not be validated." + DEFAULT_COLOR);
                    increment(errcount);
                }
            }
        }
        else if (builtinCheckError == true) // builtinCheck detected an error.
        {
            increment(errcount);
        }
    }

    if (errcount != 0)
        return false;
    return true;
}


/**
 *
 * This function takes a Rtype node and a template's tree as parameters.
 * It does as little as possible, in order to manage cases where we don't
 * actually know which interface the template is part of.
 *
 * Then it checks whether the template complies to the constraints
 * put upon it by the associated interface:
 *  - For a type : is the mapping fully compliant ?
 *                 Are all the implemented mappings valid (for the itf) ?
 *  - For a sequence : Are the mandatory chunks/pointcuts implemented ?
 *                     Are the non-mandatory chunks valid in the context ?
 *
 *      UNKOWN : How to manage non-mandatory pointcuts ?
 *
 */
function        rtxTypeCheck_Template(tplRtype : node, tplTree : node, interfaces : node)
{
    local spec = tplTree.prototype.tpl_type;
    local dummy;
    local fullTplProto = rtxRTypeFullQualifiedName<spec>(tplRtype, dummy);
    local itfName = tplRtype.name.scope;

    if (rtxTypeCheck_TemplateSpec<spec>(tplRtype, tplTree, interfaces) == true)
        return true;

    traceLine(RED + "[Error] Could not find " + spec + " template '"
              + fullTplProto + "' in interface '" + itfName + "'." + DEFAULT_COLOR);
    return false;
}

#end
