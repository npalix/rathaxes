#include "misc/colors.cws"
#include "cnorm.inc.cws"
#include "node/rtxNode.inc.cws"
#include "typing/rtxTyping.inc.cws"
#include "linker/rtxLink.inc.cws"

insert this.scripts_path = _ARGS[0] + "/compiler/";
local source;
rtxType_Load(source);

// Used to build things bit by bit
local config;
local with;

function build_version(local_node : node, v1 : value, v2 : value, v3 : value)
{
    local unit;
    rtxNodeSerial(local_node);
    rtxNodeSerialUnit(unit, v1);
    rtxNodeSerial_AddUnit(local_node, unit);
    unit = "";
    rtxNodeSerialSep(unit, ".");
    rtxNodeSerial_AddUnit(local_node, unit);
    unit = "";
    rtxNodeSerialUnit(unit, v2);
    rtxNodeSerial_AddUnit(local_node, unit);
    unit = "";
    rtxNodeSerialSep(unit, ".");
    rtxNodeSerial_AddUnit(local_node, unit);
    unit = "";
    rtxNodeSerialUnit(unit, v3);
    rtxNodeSerial_AddUnit(local_node, unit);
    unit = "";
}

function build_builtin(local_node : node, name : value, val : value)
{
    local dummy;
    local   id;
    rtxNodeIdentifier(id, name, "Builtin");
    rtxNodeRType(local_node.rtype, id, dummy);
    insert local_node.val = val;
}


config = "";
with = "";
build_version(config, "2", "6", "34");
build_version(with, "2", "6", "35");
if (rtxLink_CompareValues<"=">(with, config) == true)
{
    traceLine("Type " + config.type
              + ": With and config should not match : config < with");
    exit 1;
}


config = "";
with = "";
build_version(config, "2", "6", "35");
build_version(with, "2", "6", "35");
if (rtxLink_CompareValues<"=">(with, config) == false)
{
    traceLine("Type " + config.type
              + ": With and config should match : config == with");
    exit 1;
}


config = "";
with = "";
build_version(config, "2", "6", "35");
build_version(with, "2", "6", "34");
if (rtxLink_CompareValues<"=">(with, config) == true)
{
    traceLine("Type " + config.type
              + ": With and config should not match : config > with");
    exit 1;
}





config = "";
with = "";
build_builtin(config, "number", "1");
build_builtin(with, "number", "2");
if (rtxLink_CompareValues<"=">(with, config) == true)
{
    traceLine("Type " + config.type
              + ": With and config should not match : config < with");
    exit 1;
}

config = "";
with = "";
build_builtin(config, "number", "1");
build_builtin(with, "number", "1");
if (rtxLink_CompareValues<"=">(with, config) == false)
{
    traceLine("Type " + config.type
              + ": With and config should match : config == with");
    exit 1;
}

config = "";
with = "";
build_builtin(config, "number", "2");
build_builtin(with, "number", "1");
if (rtxLink_CompareValues<"=">(with, config) == true)
{
    traceLine("Type " + config.type
              + ": With and config should not match : config > with");
    exit 1;
}





config = "";
with = "";
build_builtin(config, "symbol", "PigeonMouette");
build_builtin(with, "symbol", "PigeonMouette");
if (rtxLink_CompareValues<"=">(with, config) == false)
{
    traceLine("Type " + config.type
              + ": With and config should match : config == with");
    exit 1;
}


config = "";
with = "";
build_builtin(config, "symbol", "Windows7");
build_builtin(with, "symbol", "WindowsXP");
if (rtxLink_CompareValues<"=">(with, config) == true)
{
    traceLine("Type " + config.type
              + ": With and config should not match : config != with");
    exit 1;
}

exit 0;
