/*
	TEST for template code parsing
*/
#include "misc/rtxTools.inc.cws"
#include "misc/colors.cws"
#include "parse/rtxParse.inc.cws"
#include "node/rtxNode.inc.cws"
#include "linker/rtxLink.inc.cws"
#include "passes/rtxPasses.inc.cws"

local working_directory = "__04_C_test_front_parse";
if (!existDirectory(working_directory))
{
        traceLine("Creating directory: " + working_directory);
        createDirectory(working_directory);
}
changeDirectory(working_directory);

local dummy;
local input;
generateString({    


        interface Builtin
        {
            provided builtintype        string;
            provided builtintype        number;
            provided builtintype        symbol;
            provided builtintype        register;
            provided builtintype        register_field;
            provided builtintype        register_value;

        }

        interface LKM : Builtin
        {
            provided pointcut           LKM::includes();
            provided pointcut           LKM::prototypes();
            provided pointcut           LKM::data();
            provided pointcut           LKM::code();
        
        
            required sequence           LKM::open();
            required sequence           LKM::close();
        }

        with Builtin {
        template builtintype Builtin::register()
        {
                chunk           LKM::prototypes()
                {
                        int     register; 
                }
        }}

        with LKM {

        /* AUTO GENERATED FILE*/
                ${pointcut      LKM::includes()};

                ${pointcut      LKM::prototypes()};
                
                ${pointcut      LKM::data()};
                
                ${pointcut      LKM::code()};
        /* END*/

        template sequence LKM::open()
        {
                chunk           LKM::code()
                {
                        int     main(int ac, char **av)
                        {
                                f1();
                        }
                }
        }

        template sequence LKM::close()
        {
                chunk           LKM::includes()
                {
                        #include <stdio.h>
                }

                chunk           LKM::code()
                {
                        int     f1()
                        {
                                printf("tata");
                        }
                }
        }}

	device RS232
	use LKM
	{
		register byte rcv_buf mode R like (........) at 0;
		register byte snd_buf mode R like (........) at 0;
		
		register byte IER mode RW like (.........) at 1
		{
			[0] as data_available;
			[1] as transmitter_empty;
			[2] as line_status_change;
			[3] as modem_status_change;
			[4] as sleep_mode;
			[5] as low_power_mode;
		}

		register byte LCR mode RW like (........) at 3
		{
			[0..1] as word_lengh
			{
				(00) -> _5bits;
				(01) -> _6bits;
				(10) -> _7bits;
				(11) -> _8bits;
			}

			[2] as stop_bits
			{
				(0) -> _1stop_bits;
				(1) -> _2stop_bits;
			}

			[3..5] as parity_type
			{
				(000) -> none;
				(001) -> odd;
				(011) -> even;
				(101) -> high;
				(111) -> low;
			}

			[6] as break_signal
			{
				(0) -> disable;
				(1) -> enable;
			}

			[7] as dlab
			{
				(0) -> buffers;
				(1) -> clock;
			}
		}

		register byte MCR mode RW like (****.*..) at 4
		{
			[0] as dtr;
			[1] as rts;
			[3] as ao2;
		}

		register byte DLL mode RW like (........) at 0;

		register byte DLM mode RW like (........) at 1;

		register byte LSR mode RW like (........) at 5
		{
			[0] as data_available
			{
				(0) -> FALSE;
				(1) -> TRUE;
			}

			[1] as overrun
			{
				(0) -> good;
				(1) -> error;
			}

			[2] as parity
			{
				(0) -> good;
				(1) -> error;
			}

			[3] as framing
			{
				(0) -> good;
				(1) -> error;
			}

			[4] as break_signal
			{
				(0) -> FALSE;
				(1) -> TRUE;
			}

			[5] as thr_state
			{
				(0) -> transmitting;
				(1) -> empty_idle;
			}

			[6] as thr_and_line
			{
				(0) -> transmitting;
				(1) -> empty_idle;
			}

			[7] as data_fifo
			{
				(0) -> good;
				(1) -> error;
			}
		}


		public property word divisor
		{
			set
			{
				SET(LCR->dlab.clock);
				SET(DLL, value[0..7]);
				SET(DLM, value[8..15]);
				SET(LCR->dlab.buffers);
			}
	
			get
			{
				SET(LCR->dlab.clock);
				SET(value[0..7], DLM);
				SET(value[8..15], DLL);
				SET(LCR->dlab.buffers);
			}
		}

		//LKM::read(LKM::Context ctx, LKM::Buffer output)
		//{
		    /*LOG("my RS232 [read]\n");
                    
		    CONCAT(output, rcv_buf)
		    {
		    	PRECONDITION {WAIT(LSR->data_available.TRUE);}
		    }*/
		//}

		//LKM::write(LKM::Context ctx, LKM::Buffer input)
		//{
			/*LOG("my RS232 [write]\n");
			COPY(snd_buf, input)
			{
				PRECONDITION {WAIT(LSR->thr_state.empty);}
			}*/
		//}

		LKM::open(/*LKM::Context ctx, LKM::Buffer buf*/)
		{
			//LOG("my RS232 [open]\n");
		}

		LKM::close(/*LKM::Context ctx, LKM::Buffer buf*/)
		{
			//LOG("my RS232 [close]\n");
		}

		//LKM::on_plug(LKM::Context ctx, LKM::Buffer buf)
		//{
			/*LOG("my RS232 [on_plug]\n");
			SET(divisor, 0x0C);
			SET(LCR->word_lengh._8bits);*/
		//}

	}

    configuration
    {
        devices = RS232;
        arch = x86;
        OS = Linux
        {
            major = 2;
            minor = 6;
            patch = 24;
        }
    }
@}, dummy, input);

insert this.scripts_path = _ARGS[0] + "/compiler/";

traceLine("input:\n" + input);
saveToFile("INPUT.TXT", input);


local source;

// PARSING PASS
traceLine("====>PARSE");
rtxParseString(source, input);
saveProject("__04_C_rtx_01_parse__.tree", source);

// MIDDLE PASS
traceLine("====>MIDDLE TYPE CHECK");
rtxMiddle_TypeCheck(source);
saveProject("__04_C_rtx_02_midpass__.tree", source);

// BACK PASS
traceLine("====>BACK META,TH,Intro,Gen");
rtxMeta(source);
rtxTypeHash(source);
rtxIntrospect(source);
/*
if (rtxTpl_TypeCheck(source) == false)
{
        traceLine("Template Type Checking failed. Stopping template compilation.");
        exit(1);
}
*/
rtxGenerate(source);
saveProject("__04_C_rtx_03_back.tree", source);

// CACHE LOADING
traceLine("====>REGISTER CACHE");
if (rtxLink_RegisterToCache(source) == false)
{       error("Can't REGISTER CACHE");}
saveProject("__04_C_rtx_04_cache.tree", this);

// FRONT PASS
traceLine("====>FRONT TYPE CHECK");
rtxFront_TypeCheck(source);
saveProject("__04_C_rtx_05_frontpass.tree", source);

traceLine("====>CONF RETRIEVE");
if (rtxFront_RetrieveConfig(source, source.config_block) == false)
{
        traceLine(RED + "[Error] Front-end configuration could not be" + " transformed for use in generation." + DEFAULT_COLOR);
        exit(-1);
}

traceLine("====>CONF BUILD");
if (rtxNodeWith_BuildFromConfig(source.config_block, source.config) == false)
{
        traceLine(RED + "[Error] Could not build Constraint node from configuration." + DEFAULT_COLOR);
        exit(-1);
}

traceLine("====>GENERATE");
rtxFrontGenerate(source);
saveProject("__04_C_rtx_06_frontgen.tree", source);

traceLine("====>CODE");
local code = cnorm2c(source.c_tree.c_block);
traceLine("Resulting code: " + code);

traceLine("====>End");
if (existVariable(source.error))
{
        traceLine(rtxError2String(source.error));
        exit(-1);
}
