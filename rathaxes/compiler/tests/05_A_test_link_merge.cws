#include "misc/colors.cws"
#include "cnorm.inc.cws"
#include "node/rtxNode.inc.cws"
#include "linker/rtxLink.inc.cws"

function addItf(cache1 : node, cache2 : node, item : node)
{
    if (!findElement(item.name, cache2.interfaces))
    {
        insert cache1.interfaces[item.name];
        insert cache2.interfaces[item.name];
        setall cache1.interfaces[item.name] = item;
        setall cache2.interfaces[item.name] = item;
    }
    else
    {
        insert cache1.interfaces[item.name];
        setall cache1.interfaces[item.name] = item;
        foreach ext in item.extensions
        {
            pushItem cache2.interfaces[item.name].extensions;
            setall cache2.interfaces[item.name].extensions#back = ext;
        }
    }
}

function createInterface(tmp : node, name : value, tree_flag : value = false)
{
    clearVariable(tmp);
    insert tmp.name = name;
    if (tree_flag == true)
        insert tmp.tree_file = name + ".tree";
    insert tmp.extensions;
}

function addExtension(itf : node, id : value)
{
    pushItem itf.extensions;
    insert itf.extensions#back.with;
    insert itf.extensions#back.tree_file = "trololofile"+id+".tree";
}

function addGlobal(cache1 : node, cache2 : node, item : node)
{
    pushItem cache1.global_code;
    pushItem cache2.global_code;
    setall cache1.global_code#back = item;
    setall cache2.global_code#back = item;
}

function createGlobalCacheItem(tmp : node, nb : value)
{
    clearVariable(tmp);
    insert tmp.with;
    insert tmp.script_file = "global_code_script_"+nb+".cws";
    insert tmp.tree_file = "global_code_tree_"+nb+".tree";
}

function addChunk(cache1 : node, cache2 : node, template : node, chunk : node)
{
    local chunk_id;

    hashTemplatePrototype(template.rtype, chunk.tpl_id);

    if (!findElement(chunk.name, cache1.chunks))
        insert cache1.chunks[chunk.name];
    chunk_id = getArraySize(cache1.chunks[chunk.name]);
    pushItem cache1.chunks[chunk.name];
    setall cache1.chunks[chunk.name]#back = chunk;
    // Now insert the template containing the inserted chunk...
    if (!findElement(chunk.tpl_id, cache1.templates.sequences))
        insert cache1.templates.sequences[chunk.tpl_id];
    pushItem cache1.templates.sequences[chunk.tpl_id];
    setall cache1.templates.sequences[chunk.tpl_id]#back = template;
    insert cache1.templates.sequences[chunk.tpl_id]#back.chunks[chunk.name] = chunk_id;

    if (!findElement(chunk.name, cache2.chunks))
        insert cache2.chunks[chunk.name];
    chunk_id = getArraySize(cache2.chunks[chunk.name]);
    pushItem cache2.chunks[chunk.name];
    setall cache2.chunks[chunk.name]#back = chunk;
    // Now insert the template containing the inserted chunk...
    if (!findElement(chunk.tpl_id, cache2.templates.sequences))
        insert cache2.templates.sequences[chunk.tpl_id];
    pushItem cache2.templates.sequences[chunk.tpl_id];
    setall cache2.templates.sequences[chunk.tpl_id]#back = template;
    insert cache2.templates.sequences[chunk.tpl_id]#back.chunks[chunk.name] = chunk_id;
}

function createTemplateCacheItem(tmp : node, nb : value)
{
    local type_id;
    local params;
    local chunk_idx;

    clearVariable(tmp);
    insert tmp.with;
    insert tmp.rtype;
    rtxNodeIdentifier(type_id, "tpl_"+nb+"LKM");
    rtxNodeRType(tmp.rtype, type_id, params);
    pushItem params;
    rtxNodeIdentifier(params#back, "Context");
    if ($nb % 2$ == 1)
    {
        insert tmp.script_file = "template_mapping_script_"+nb+".cws";
        insert tmp.tree_file = "template_mapping_tree_"+nb+".tree";
    }
    insert tmp.chunks;
}

function createChunkCacheItem(tmp : node, nb : value)
{
    clearVariable(tmp);
    insert tmp.name = "chunk_"+$nb % 2$;
    insert tmp.with;
    insert tmp.with.chunk_ver = nb;
    insert tmp.tpl_id;
    insert tmp.script_file = "chunk_script_"+nb+".cws";
    insert tmp.tree_file = "chunk_tree_"+nb+".tree";
}

/*
 * First, build two fake cache trees to check against the expected result.
 */
local cache1;
local cache2;
local result;
local expected;

local tmp;
local tmp2;

/*
 * First create two global_code items into each cache.
 */
insert cache1.interfaces;
insert cache1.global_code;
insert cache1.templates;
insert cache1.templates.sequences;
insert cache1.templates.types;
insert cache1.chunks;
insert cache2.interfaces;
insert cache2.global_code;
insert cache2.templates;
insert cache2.templates.sequences;
insert cache2.templates.types;
insert cache2.chunks;
insert expected.interfaces;
insert expected.global_code;
insert expected.templates;
insert expected.templates.sequences;
insert expected.templates.types;
insert expected.chunks;


createInterface(tmp, "LKM", true);
addExtension(tmp, "1");
addItf(cache1, expected, tmp);

createInterface(tmp, "Userland", true);
addItf(cache1, expected, tmp);

createInterface(tmp, "LKM", false);
addExtension(tmp, "2");
addItf(cache2, expected, tmp);

createGlobalCacheItem(tmp, "1");
addGlobal(cache1, expected, tmp);
createGlobalCacheItem(tmp, "3");
addGlobal(cache1, expected, tmp);

createGlobalCacheItem(tmp, "2");
addGlobal(cache2, expected, tmp);
createGlobalCacheItem(tmp, "4");
addGlobal(cache2, expected, tmp);

/*
 * Then create two templates items into each cache, with their associated chunk.
 */
createTemplateCacheItem(tmp, "1");
createChunkCacheItem(tmp2, "1");
addChunk(cache1, expected, tmp, tmp2);

createTemplateCacheItem(tmp, "3");
createChunkCacheItem(tmp2, "3");
addChunk(cache1, expected, tmp, tmp2);

createTemplateCacheItem(tmp, "2");
createChunkCacheItem(tmp2, "2");
addChunk(cache2, expected, tmp, tmp2);

createTemplateCacheItem(tmp, "4");
createChunkCacheItem(tmp2, "4");
addChunk(cache2, expected, tmp, tmp2);

// And finally, merge the caches
insert this.cache_conflicts = "ignore"; // Ignore the conflicts, only insert non-conflicting elements.
rtxLink_MergeCaches(cache1, cache2, cache1);


if (!equalTrees(expected, cache1))
{
    traceLine("Expected result and actual result differ !");
    //traceLine("Expected:\n"+toString(expected, true));
    //traceLine("Obtained:\n"+toString(cache1, true));
    exit(1);
}

exit (0);
