/*
 *	TEST for type checking
 */
#include "misc/rtxTools.inc.cws"
#include "misc/colors.cws"
#include "parse/rtxParse.inc.cws"
#include "node/rtxNode.inc.cws"
#include "linker/rtxLink.inc.cws"
#include "passes/rtxPasses.inc.cws"

local working_directory = "__cache";
if (!existDirectory(working_directory))
{
        traceLine("Creating directory: " + working_directory);
        createDirectory(working_directory);
}
changeDirectory(working_directory);

insert this.scripts_path = _ARGS[0] + "/compiler/";

// This function returns 0 in case of failure, since we expected a failure.
// Otherwise it returns 1.
function checkInput(input : node, inputsave : value)
{
    traceLine("input:\n" + input);
    saveToFile(inputsave, input);

    local source;

    // PARSING PASS
    traceLine("====>PARSE");
    rtxParseString(source, input);

    // MIDDLE PASS
    traceLine("====>MIDDLE TYPE CHECK");
    if (rtxMiddle_TypeCheck(source) == false)
    {
        traceLine("Type Checking failed at MiddleEnd step: unexpected");
        return 1;
    }

    // REGISTER TO CACHE
    traceLine("====>REGISTERING INTO THE CACHE");
    if (rtxLink_RegisterToCache(source) == false)
    {
        traceLine("Registration failed.");
        return 1;
    }

    // BACK PASS
    traceLine("====>BACK TYPE CHECK");
    if (rtxTpl_TypeCheck(source) == false)
    {
        traceLine("Type Checking failed at Backend step as expected");
        return 0;
    }

    return 1;
}



local dummy;
local input;
generateString({
        interface Builtin
        {
            provided builtintype Number;
        }

        interface LKM : Builtin
        {
            provided type   Bomb
            {
                method              testMethod();
                attribute Number    numeric;
            }
        }

        with LKM
        {
            template type LKM::Bomb()
            {
                method testMethod(Number paf)
                {
                }

                map
                {
                    numeric: 43;
                }
            }
        }
@}, dummy, input);

local ret = checkInput(input, "INPUT.TXT");
if (ret == 1)
    exit(1);

clearVariable(this);
clearVariable(dummy);
clearVariable(input);
generateString({
        interface Builtin
        {
            provided builtintype Number;
            provided builtintype String;
        }

        interface LKM : Builtin
        {
            provided type   Bomb
            {
                method              testMethod(String);
                attribute Number    numeric;
            }
        }

        with LKM
        {
            template type LKM::Bomb()
            {
                method testMethod(Number paf)
                {
                }

                map
                {
                    numeric: 43;
                }
            }
        }
@}, dummy, input);

local ret = checkInput(input, "INPUT.TXT");

exit (ret);
