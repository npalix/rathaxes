#if !existFunction(rtxNodeFront_version)

function rtxNodeFront_version()
{return "1.0";}

function rtxNodeConfig(local_node   : node,
                       out_ref_body : reference)
{
    rtxNode(local_node);
    local_node.type = "__rtx_config__";

    insert local_node.body;
    cnormNodeBlock(local_node.body);
    ref out_ref_body = local_node.body;

    return true;
}

function rtxNodeConfigField(local_node  : node,
                            out_ref_id  : reference,
                            out_ref_val : reference)
{
    rtxNode(local_node);
    local_node.type = "__rtx_config_field__";

    insert local_node.id;
    insert local_node.val;

    ref out_ref_id = local_node.id;
    ref out_ref_val = local_node.val;

    return true;
}

function rtxNodeConfig_BodyAddField(local_node  : node,
                                    field       : node)
{
    if ((local_node#parent.type != "__rtx_config__"
         && local_node#parent.type != "__rtx_config_field__")
        || local_node.type != "__block__")
        return false;

    pushItem local_node.block;
    setall local_node.block#back = field;
    
    return true;
}

function rtxNodeConfigField_Extend(local_node   : node,
                                   out_ref_body : reference)
{
    if (local_node.type != "__rtx_config_field__")
        return false;

    insert local_node.extension;
    cnormNodeBlock(local_node.extension);
    ref out_ref_body = local_node.extension;

    return true;
}

function rtxNodeDevice(local_node : node, name : value, out_ref_body : reference)
{
    rtxNode(local_node);
    local_node.type = "__rtx_device__";
    insert local_node.name = name;
    insert local_node.body;
    cnormNodeBlock(local_node.body);
    ref out_ref_body = local_node.body;
    return true; 
}

function rtxNodeDevice_AddUseInterface(local_node : node, name : value)
{
    if (!existVariable(local_node.use))
    {	insert local_node.use;}
    pushItem local_node.use = name;
    return true;
}

function rtxNodeRegister(local_node : node, regtype_ref : reference, like_ref : reference, body_ref : reference)
{
	rtxNode(local_node);
	local_node.type = "__rtx_register__";
	insert local_node.name;
	insert local_node.regtype;
	insert local_node.like;
	insert local_node.body;
	cnormNodeBlock(local_node.body);
	ref regtype_ref = local_node.regtype;
	ref like_ref = local_node.like;
	ref body_ref = local_node.body;
	return true;
}

function rtxNodeLike(local_node : node, mode : value, pattern : value, offset : value)
{
	rtxNode(local_node);
	local_node.type = "__rtx_like__";
	insert local_node.mode = mode;
	insert local_node.pattern = pattern;
	insert local_node.offset = offset;
	return true;
}

function rtxNodeRegMap(local_node : node, name : value, map : node, listmask : reference)
{
        rtxNode(local_node);
        local_node.type = "__rtx_map__";
        insert local_node.name = name;
        insert local_node.map;
        setall local_node.map = map;
        insert local_node.listmask;
        ref listmask = local_node.listmask;
        return true;
}

function rtxNodeSequence(local_node : node, rtype : node, seqparamname : node, body : reference)
{
        rtxNode(local_node);
        local_node.type = "__rtx_sequence__";
        insert local_node.rtype;
        setall local_node.rtype = rtype;
        insert local_node.seqParamName;
        setall local_node.seqParamName = seqparamname;
        insert local_node.body;
        cnormNodeBlock(local_node.body);
        ref body = local_node.body;
        return true;
}

#end
