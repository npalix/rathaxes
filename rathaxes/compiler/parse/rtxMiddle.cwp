rtx_stmt<"interface">(theBlock : node) ::=
    #pushItem(theBlock.block)
    => local lastNode;
    #check(cnormNodeBlock_GetLastNode(theBlock, lastNode))
    => local inheritNode;
    => local body;

    #readIdentifier:name
    #check(rtxNode_InfoLocation(lastNode))
    #check(rtxNodeItf(lastNode, name, inheritNode, body))
    [inheritance(inheritNode)]?
    #continue(sError, "Block expected after interface declaration.")
    '{'
        [ rtx_itf_declaration(body, lastNode.types) ]*
        #continue(sError, "Expected '}' closing the block.")
    '}'
    => ref lastNode#root.interfaces[name] = lastNode;
;

inherit(theNode : node) ::=
    #readIdentifier:parentName
    => insert theNode[parentName];
;

inheritance(theNode : node) ::=
    ':'
    #continue(sError, "Interface name expected after ':'")
    inherit(theNode)
    [
        ','
        #continue(sError, "Interface name expected after ','")
        inherit(theNode)
    ]*
;

rtx_itf_qualifier ::=
    "provided" | "required" | "optional"
;

rtx_itf_type ::=
    "sequence" | "variable" | "type" | [ "builtintype" ] | "pointcut" | "chunk"
;

rtx_itf_declaration(theBlock : node, nameList : node) ::=
    #pushItem(theBlock.block)
    => local lastNode;
    #check(cnormNodeBlock_GetLastNode(theBlock, lastNode))

    => local qualifier;
    => local sStmt;

    rtx_itf_qualifier:qualifier
    #continue(sError, "Expected declaration type after interface declaration qualifier '"
                      + qualifier + "'.")
    rtx_itf_type:sStmt
    #check(rtxNode_InfoLocation(lastNode))
    rtx_itf_stmt<sStmt>(lastNode, nameList, qualifier)
;

rtx_type_list(theDecl : node, theRtype : node) ::=
    #pushItem(theDecl)
    #readIdentifier:theDecl#back ';'
;

rtx_itf_stmt<"pointcut">(theDecl : node, nameList : node, theQualif : value) ::=
    => local nameNode;
    => local param_types;
    => local dummy_ids; // actually ignored in the interface
    => local default; // Actually unused in the interface.

    #continue(sError, "Expected pointcut name after pointcut declaration.")
    rtx_scoped_identifier(nameNode)
    #check(rtxNodeItfPointcutDeclaration(theDecl, theQualif, nameNode, param_types))

    #continue(sError, "Expected parameters to pointcut '"+rtxRTypeName<nameNode.type>(nameNode)+"'.")
    rtx_parameter_list(param_types, dummy_ids)

    #continue(sError, "Missing ';' ending pointcut declaration.")
    ';'
;

rtx_itf_stmt<"chunk">(theDecl : node, nameList : node, theQualif : value) ::=
    => local id;
    => local param_types;
    => local dummy_ids; // actually ignored in the interface

    #continue(sError,  "Expected pointcut name after chunk declaration.")
    rtx_scoped_identifier(id)
    #check(rtxNodeItfChunkDeclaration(theDecl, id, param_types, theQualif))

    #continue(sError, "Expected parameters to chunk '"+rtxRTypeName<id.type>(id)+"'.")
    rtx_parameter_list(param_types, dummy_ids)
    #continue(sError, "Missing ';' ending chunk declaration.")
    ';'
;

rtx_itf_stmt<"type">(theDecl : node, nameList : node, theQualif : value) ::=
/**/=> local nameNode;
/**/=> local params;
/**/=> local rtypeNode;

    #check(rtxNodeItfDeclaration(theDecl, theQualif, "type"))
    rtx_scoped_identifier(nameNode)
    #check(rtxNodeRType(rtypeNode, nameNode, params))
/**/=> addRTypeToItfDeclaration(theDecl, rtypeNode);
    #continue(sError, "Missing block describing type in declaration.")
    [
/**/    => local typeBody;
        '{'
            #continue(sError, "Missing '}' ending block.")
            [ rtx_itf_type_body_declaration(typeBody) ]*
        '}'
        #check(rtxItfDeclaration_addBody(theDecl, typeBody))
    ]
;

rtx_itf_type_body_stmt ::=
    "attribute" | "method" | "chunk"
;

rtx_itf_type_body_declaration(theBlock : node) ::=
    #pushItem(theBlock)
/**/=> localref theDecl = theBlock#back;
    rtx_itf_type_body_stmt:declType
    #continue(sError, "Error in declaration of type's " + declType)
    rtx_itf_type_stmt<declType>(theDecl)
    #continue(sError, "Missing ';' ending type's " + declType + " declaration.")
    ';'
;

rtx_itf_type_stmt<"chunk">(theDecl : node) ::=
    => local theName;
    => local theParamTypes;
    => local dummy_ids;
    #continue(sError, "Expected name for method in type's declaration.")
    rtx_scoped_identifier(theName)
    #check(rtxNode_InfoLocation(theDecl))
    #continue(sError, "Expected parameters to method '"+rtxRTypeName<theName.type>(theName)+"'.")
    rtx_parameter_list(theParamTypes, dummy_ids)
    #check(rtxNodeItfTypeChunkDeclaration(theDecl, theName, theParamTypes))
;

rtx_itf_type_stmt<"attribute">(theDecl : node) ::=
    => local theType;
    #continue(sError, "Expected type for attribute in type's declaration.")
    rtx_scoped_identifier(theType)
    #check(rtxNode_InfoLocation(theDecl))
    #continue(sError, "No attribute name given.")
    => local theName;
    identifier(theName)
    #check(rtxNodeItfTypeAttributeDeclaration(theDecl, theType, theName))
;

rtx_itf_type_stmt<"method">(theDecl : node) ::=
    => local theName;
    => local theParamTypes;
    => local dummy_ids;
    #continue(sError, "Expected name for method in type's declaration.")
    rtx_scoped_identifier(theName)
    #check(rtxNode_InfoLocation(theDecl))
    #continue(sError, "Expected parameters to method '"+rtxRTypeName<theName.type>(theName)+"'.")
    rtx_parameter_list(theParamTypes, dummy_ids)
    #check(rtxNodeItfTypeMethodDeclaration(theDecl, theName, theParamTypes))
;


rtx_itf_stmt<"builtintype">(theDecl : node, nameList : node, theQualif : value) ::=
    => local nameNode;
    => local params;
    => local rtypeNode;

    #check(rtxNodeItfDeclaration(theDecl, theQualif, "builtintype"))
    rtx_scoped_identifier(nameNode)
    #check(rtxNode_InfoLocation(theDecl))
    #continue(sError, "Missing ';' ending builtintype declaration.")
    ';'
    #check(rtxNodeRType(rtypeNode, nameNode, params))
    => addRTypeToItfDeclaration(theDecl, rtypeNode);
;

rtx_itf_stmt<"variable">(theDecl : node, nameList : node, theQualif : value) ::=
    => local typeNode;
    => local rtypeNode;
    => local params;
    => local sName;

    #check(rtxNodeItfDeclaration(theDecl, theQualif, "variable"))
    rtx_scoped_identifier(typeNode)
    rtx_scoped_identifier(sName)
    #check(rtxNode_InfoLocation(theDecl))
    #continue(sError, "Missing ';' ending variable declaration.")
    ';'
    => setall theDecl.identifiers = sName;
    #check(rtxNodeRType(rtypeNode, typeNode, params))
    => setall theDecl.rtype = rtypeNode;
;

rtx_itf_stmt<"sequence">(theDecl : node, nameList : node, theQualif : value) ::=
    #check(rtxNodeItfDeclaration(theDecl, theQualif, "sequence"))
    => local rtypeNode;
    rtx_template_prototype(rtypeNode, theDecl.identifiers)
    #check(rtxNode_InfoLocation(theDecl))
    => addRTypeToItfDeclaration(theDecl, rtypeNode);
    #continue(sError, "Expected Block or ';' ending sequence declaration.")
    [
        ';'
    |
        [
            => local sequenceBody;
            '{'
                [ rtx_itf_sequence_body_declaration(sequenceBody) ]*
                #continue(sError, "Expected '}' ending block.")
            '}'
            #check(rtxItfDeclaration_addBody(theDecl, sequenceBody))
        ]
    ]
;

rtx_itf_sequence_body_declaration(theBlock : node) ::=
    => local local_node;
    =>local dummy;
    // let's parse
    rtx_itf_qualifier:sQualifier
    #continue(sError, "Currently, only the qualifier 'provided' is supported in a sequence body.")
    #check(sQualifier == "provided")
    rtx_itf_type:sStmt
    #continue(sError, "Only pointcut or chunk declarations are allowed in a sequence body.")
    #check(sStmt == "pointcut" || sStmt == "chunk")
    rtx_itf_stmt<sStmt>(local_node, dummy, sQualifier)

    // let's validate
    #pushItem(theBlock)
    => setall theBlock#back = local_node;
;

rtx_pointcut_param(theParams : node) ::=
    #pushItem(theParams)
    rtx_scoped_identifier(theParams#back)
;

rtx_pointcut_parameter(theParams : node) ::=
    '('
    [ rtx_pointcut_param(theParams) [ ',' rtx_pointcut_param(theParams) ]* ]?
    ')'
;

