#include "rtxTemplatedLanguage.cwp"

/////// TEMPLATE
rtx_stmt<"template">(theBlock : node) ::=
        // Initialize the current node
/**/    =>traceLine("TEMPLATE!");
/**/    #pushItem(theBlock.block)
/**/    => local lastNode;
/**/    #check(cnormNodeBlock_GetLastNode(theBlock, lastNode))

        // Create a rtxTPL node.
        // The chunk_block var will reference the block of chunks
/**/    => local prototype; 
/**/    => local chunk_block;
/**/    #check(rtxNodeTpl(lastNode, prototype, chunk_block))

        // Now, retrieve the template's prototype.
/**/    => local rtype;
/**/    => local identifiers;
        #readIdentifier:sType
        #check(rtxNode_InfoLocation(lastNode))
/**/    #check(rtxNodeTplPrototype(prototype, sType, rtype, identifiers))
        rtx_template_prototype(rtype, identifiers)

        // And parse the template's block
/**/    #continue(sError, "Expected block after template prototype.")
        '{'
                rtx_stmt_template_content<prototype.tpl_type>(lastNode, chunk_block)
        '}'
;

// TEMPLATE SEQUENCE
rtx_stmt_template_content<"sequence">(theTemplate : node, theBlock : node) ::=
/**/    =>traceLine("Template sequence block!");
        [
                // Theoretically, the template should only contain chunks...
                "chunk" rtx_stmt<"chunk">(theBlock)
        ]*
;

// TEMPLATE TYPE
rtx_stmt_template_content<"type">(theTemplate : node, theBlock : node) ::=
/**/    =>traceLine("Template type block!");
        [
                "chunk" rtx_stmt<"chunk">(theBlock)
        |
                "map"
/**/            =>traceLine("MAP");
/**/            =>local mapping;
/**/            =>local body;
/**/            #check(rtxNodeTpl_AddMapping(theTemplate, mapping))
/**/            #check(rtxNodeTplTypeMapping(mapping, body))
/**/            #continue(sError, "Mapping block expected after map statement.")
                rtx_type_map(mapping)
/**/            #continue(sError, "The mapping for template type "
/**/                + theTemplate.rtype.name.scope + "::"
/**/                + theTemplate.rtype.name.id + " is defined twice.")
        ]*
/**/    #continue(sError, "No mapping defined for template type"
/**/         + theTemplate.rtype.name.scope
/**/         + "::" + theTemplate.rtype.name.id + "!")
/**/    #check(rtxNodeTpl_HasMapping(theTemplate))
        #check(rtxNode_InfoLocation(theTemplate))
;

// TYPE MAPPING
rtx_type_map(theBlock : node) ::=
        '{'
                [ rtx_type_map_identifier(theBlock) ]*
        '}'
;

// MAP ONE ID
rtx_type_map_identifier(theMap : node) ::=
        #readIdentifier:sId
        #check(rtxNode_InfoLocation(theMap))
/**/    #continue(sError, "Mapping for identifier " + sId + " is already defined.")
/**/    #check(!rtxNodeTplTypeMapping_HasIdentifier(theMap, sId))
/**/    => local mapped_body;
/**/    #check(rtxNodeTplTypeMapping_AddIdentifier(theMap, sId, mapped_body))
/**/    #continue(sError, "Expected ':' after identifier " + sId)
        ':'
        // C expression here.
/**/    #continue(sError, "No C code defined for the mapping of identifier " + sId)
        rtx_templatedLang_single_stmt<"C">(mapped_body)
;


//////// POINTCUT
rtx_pointcut(theBlock : node) ::=
/**/    =>traceLine("POINTCUT!");
/**/    #pushItem(theBlock.block)
/**/    => local lastNode;
/**/    #check(cnormNodeBlock_GetLastNode(theBlock, lastNode))
/**/    => local ph;
/**/    #check(rtxNodePointcut_Raw(lastNode, ph))
        rtx_templatedLang_code:sPlaceHolder
        #check(rtxNode_InfoLocation(lastNode))
/**/    => ph = sPlaceHolder;
/**/    #continue(sError, "Expected ';' after pointcut in with block.")
        ';'
;

/////// WITH
rtx_stmt<"with">(theBlock : node) ::=
/**/    => traceLine("WITH");
        // create a block to host the with node
/**/    #pushItem(theBlock.block)
/**/    => local lastNode;
/**/    #check(cnormNodeBlock_GetLastNode(theBlock, lastNode))

        // link to the variable mapping
/**/    => local interfaces;
/**/    => local constraints;
/**/    => local body;
/**/    => local c_block;
/**/    #check(rtxNodeWith(lastNode, interfaces, constraints, body, c_block))
        rtx_stmt_with_descript(interfaces, constraints)
        #check(rtxNode_InfoLocation(lastNode))
        
        // block of the with node
/**/    #continue(sError, "Expected block after constraints.")
        '{'
                [
                // contains any kind of rtx stmt (with, template, chunk)
                rtx_declaration(body)
                |
                // or global pointcuts
                rtx_pointcut(c_block)
                ]*
        '}'
;

// Description part of a WITH
rtx_stmt_with_descript(theItfs : node, theConstraints : node) ::=
        // First read the dependencies...
        rtx_stmt_with_itf(theItfs)
        [
                "values"
/**/            #continue(sError, "Constraints expected after values keyword.")
                // variables of the with node
                rtx_stmt_with_constraints(theConstraints)
        ]?
;

// List of Interface concern by the WITH
rtx_stmt_with_itf(theItfs : node) ::=
/**/    #pushItem(theItfs)
        #readIdentifier:theItfs#back
        [
                ','
/**/            #continue(sError, "Interface list in constraint error")
/**/            #pushItem(theItfs)
                #readIdentifier:theItfs#back
        ]*
;

// List of constraints
rtx_stmt_with_constraints(theList: node) ::=
        rtx_stmt_with_constraint(theList)
        [
                ','
 /**/           #continue(sError, "Constraints list error.")
                rtx_stmt_with_constraint(theList)
        ]*
;

// One constraint
rtx_stmt_with_constraint(theList : node) ::=
/**/    #pushItem(theList)
/**/    => local identifier;
        rtx_scoped_identifier(identifier)
        rtx_stmt_with_operator:sOperator
/**/    => local theVal;
/**/    #check(rtxNodeWithConstraint(theList#back, identifier, sOperator, theVal))
        #check(rtxNode_InfoLocation(theList#back))
        rtx_value(theVal)
;

// Constraint operator
rtx_stmt_with_operator ::=
	"=" | ["<=" | ">=" | '<' [#!ignore !'<'] | '>' [#!ignore !'>'] ]
;

//////// CHUNK
rtx_stmt<"chunk">(theBlock : node) ::=
/**/    => traceLine("CHUNK");
/**/    #continue(sError, "Expected pointcut associated to chunk declaration.")
        // Create an item in the Block list to host the chunk
/**/    #pushItem(theBlock.block)
/**/    => local lastNode;
/**/    #check(cnormNodeBlock_GetLastNode(theBlock, lastNode))

        // Optional Joinpoint (argument of the pointcut)
        // Build the chunk node, and retrieve the references to it's internals
        // (body and parameters)
/**/    => local pointcutId;
/**/    => local param_types;
/**/    => local param_ids;
/**/    => local body;
/**/    => local pointcut;
/**/    #check(rtxNodeChunk(lastNode, pointcut, param_ids, body))
        rtx_scoped_identifier(pointcutId)
        #check(rtxNode_InfoLocation(lastNode))
        #check(rtxNodeRType(pointcut, pointcutId, param_types))

        #continue(sError, "Expected parameters to chunk '"+rtxRTypeName<pointcut.type>(pointcut)+"'.")
        rtx_parameter_list(param_types, param_ids)
/**/    #continue(sError, "Expected block after chunk declaration.")
        rtx_templatedLang_body<"C">(body)
;
