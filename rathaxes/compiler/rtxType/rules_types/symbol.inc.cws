function        rtxType_Parse<"symbol.inc.cws">(src : value, out_type : node)
{
        parseStringAsBNF({
                string ::= [
                        [#readIdentifier "::"]? // scope
                        #readIdentifier 
                                // TODO : add search in tree for context of what symbol is?
                                [
                                        '.' #readIdentifier // register field
                                        ["->" #readIdentifier]? // register value
                                ]?
                        ]:str
                        =>{
                                // TODO: could be rtype...
                                this.rtype = "";
                                local nameId;
                                rtxNodeIdentifier(nameId, "symbol", "Builtin");
                                local dummy;
                                rtxNodeRType(this.rtype, nameId, dummy);
                                insert this.val = str;
                        }
                ;
        }, out_type, src);
        if (out_type.rtype == "unknown")
        {       return false;}
//        traceLine("FOUND:" + toString(out_type));
        return true;
}

function        rtxNode2cnormNode<"symbol">(in_param : node, out_param : node)
{
    return cnormNode_TerminalId(out_param, in_param.val);
}

/*
 * The only comparison operator valid for a symbol is the equal.
 */
function rtxLink_CompareEqual<"symbol">(ref : node, val : node)
{
    return (ref.val == val.val);
}
